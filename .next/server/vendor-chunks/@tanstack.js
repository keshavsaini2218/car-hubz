"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tanstack";
exports.ids = ["vendor-chunks/@tanstack"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tanstack/react-virtual/dist/esm/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tanstack/react-virtual/dist/esm/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Virtualizer: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.Virtualizer),\n/* harmony export */   approxEqual: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.approxEqual),\n/* harmony export */   defaultKeyExtractor: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.defaultKeyExtractor),\n/* harmony export */   defaultRangeExtractor: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.defaultRangeExtractor),\n/* harmony export */   elementScroll: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.elementScroll),\n/* harmony export */   measureElement: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.measureElement),\n/* harmony export */   memo: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.memo),\n/* harmony export */   notUndefined: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.notUndefined),\n/* harmony export */   observeElementOffset: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeElementOffset),\n/* harmony export */   observeElementRect: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeElementRect),\n/* harmony export */   observeWindowOffset: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeWindowOffset),\n/* harmony export */   observeWindowRect: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeWindowRect),\n/* harmony export */   useVirtualizer: () => (/* binding */ useVirtualizer),\n/* harmony export */   useWindowVirtualizer: () => (/* binding */ useWindowVirtualizer),\n/* harmony export */   windowScroll: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.windowScroll)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tanstack/virtual-core */ \"(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/index.js\");\n\n\n\n\nconst useIsomorphicLayoutEffect = typeof document !== \"undefined\" ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction useVirtualizerBase(options) {\n    const rerender = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(()=>({}), {})[1];\n    const resolvedOptions = {\n        ...options,\n        onChange: (instance2, sync)=>{\n            var _a;\n            if (sync) {\n                (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(rerender);\n            } else {\n                rerender();\n            }\n            (_a = options.onChange) == null ? void 0 : _a.call(options, instance2, sync);\n        }\n    };\n    const [instance] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.Virtualizer(resolvedOptions));\n    instance.setOptions(resolvedOptions);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        return instance._didMount();\n    }, []);\n    useIsomorphicLayoutEffect(()=>{\n        return instance._willUpdate();\n    });\n    return instance;\n}\nfunction useVirtualizer(options) {\n    return useVirtualizerBase({\n        observeElementRect: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeElementRect,\n        observeElementOffset: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeElementOffset,\n        scrollToFn: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.elementScroll,\n        ...options\n    });\n}\nfunction useWindowVirtualizer(options) {\n    return useVirtualizerBase({\n        getScrollElement: ()=>typeof document !== \"undefined\" ? window : null,\n        observeElementRect: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeWindowRect,\n        observeElementOffset: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeWindowOffset,\n        scrollToFn: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.windowScroll,\n        initialOffset: typeof document !== \"undefined\" ? window.scrollY : void 0,\n        ...options\n    });\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXZpcnR1YWwvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStCO0FBQ087QUFDOEg7QUFDN0g7QUFDdkMsTUFBTVMsNEJBQTRCLE9BQU9DLGFBQWEsY0FBY1Ysa0RBQXFCLEdBQUdBLDRDQUFlO0FBQzNHLFNBQVNhLG1CQUFtQkMsT0FBTztJQUNqQyxNQUFNQyxXQUFXZiw2Q0FBZ0IsQ0FBQyxJQUFPLEVBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ3BELE1BQU1pQixrQkFBa0I7UUFDdEIsR0FBR0gsT0FBTztRQUNWSSxVQUFVLENBQUNDLFdBQVdDO1lBQ3BCLElBQUlDO1lBQ0osSUFBSUQsTUFBTTtnQkFDUm5CLG9EQUFTQSxDQUFDYztZQUNaLE9BQU87Z0JBQ0xBO1lBQ0Y7WUFDQ00sQ0FBQUEsS0FBS1AsUUFBUUksUUFBUSxLQUFLLE9BQU8sS0FBSyxJQUFJRyxHQUFHQyxJQUFJLENBQUNSLFNBQVNLLFdBQVdDO1FBQ3pFO0lBQ0Y7SUFDQSxNQUFNLENBQUNHLFNBQVMsR0FBR3ZCLDJDQUFjLENBQy9CLElBQU0sSUFBSVEsK0RBQVdBLENBQUNTO0lBRXhCTSxTQUFTRSxVQUFVLENBQUNSO0lBQ3BCakIsNENBQWUsQ0FBQztRQUNkLE9BQU91QixTQUFTRyxTQUFTO0lBQzNCLEdBQUcsRUFBRTtJQUNMakIsMEJBQTBCO1FBQ3hCLE9BQU9jLFNBQVNJLFdBQVc7SUFDN0I7SUFDQSxPQUFPSjtBQUNUO0FBQ0EsU0FBU0ssZUFBZWQsT0FBTztJQUM3QixPQUFPRCxtQkFBbUI7UUFDeEJYLGtCQUFrQkEsd0VBQUFBO1FBQ2xCQyxvQkFBb0JBLDBFQUFBQTtRQUNwQjBCLFlBQVl6QixpRUFBYUE7UUFDekIsR0FBR1UsT0FBTztJQUNaO0FBQ0Y7QUFDQSxTQUFTZ0IscUJBQXFCaEIsT0FBTztJQUNuQyxPQUFPRCxtQkFBbUI7UUFDeEJrQixrQkFBa0IsSUFBTSxPQUFPckIsYUFBYSxjQUFjc0IsU0FBUztRQUNuRTlCLG9CQUFvQkcscUVBQWlCQTtRQUNyQ0Ysc0JBQXNCRyx1RUFBbUJBO1FBQ3pDdUIsWUFBWXRCLGdFQUFZQTtRQUN4QjBCLGVBQWUsT0FBT3ZCLGFBQWEsY0FBY3NCLE9BQU9FLE9BQU8sR0FBRyxLQUFLO1FBQ3ZFLEdBQUdwQixPQUFPO0lBQ1o7QUFDRjtBQUlFLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyX3Nob3djYXNlLy4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC12aXJ0dWFsL2Rpc3QvZXNtL2luZGV4LmpzPzliZjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBmbHVzaFN5bmMgfSBmcm9tIFwicmVhY3QtZG9tXCI7XG5pbXBvcnQgeyBvYnNlcnZlRWxlbWVudFJlY3QsIG9ic2VydmVFbGVtZW50T2Zmc2V0LCBlbGVtZW50U2Nyb2xsLCBvYnNlcnZlV2luZG93UmVjdCwgb2JzZXJ2ZVdpbmRvd09mZnNldCwgd2luZG93U2Nyb2xsLCBWaXJ0dWFsaXplciB9IGZyb20gXCJAdGFuc3RhY2svdmlydHVhbC1jb3JlXCI7XG5leHBvcnQgKiBmcm9tIFwiQHRhbnN0YWNrL3ZpcnR1YWwtY29yZVwiO1xuY29uc3QgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbmZ1bmN0aW9uIHVzZVZpcnR1YWxpemVyQmFzZShvcHRpb25zKSB7XG4gIGNvbnN0IHJlcmVuZGVyID0gUmVhY3QudXNlUmVkdWNlcigoKSA9PiAoe30pLCB7fSlbMV07XG4gIGNvbnN0IHJlc29sdmVkT3B0aW9ucyA9IHtcbiAgICAuLi5vcHRpb25zLFxuICAgIG9uQ2hhbmdlOiAoaW5zdGFuY2UyLCBzeW5jKSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBpZiAoc3luYykge1xuICAgICAgICBmbHVzaFN5bmMocmVyZW5kZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVyZW5kZXIoKTtcbiAgICAgIH1cbiAgICAgIChfYSA9IG9wdGlvbnMub25DaGFuZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKG9wdGlvbnMsIGluc3RhbmNlMiwgc3luYyk7XG4gICAgfVxuICB9O1xuICBjb25zdCBbaW5zdGFuY2VdID0gUmVhY3QudXNlU3RhdGUoXG4gICAgKCkgPT4gbmV3IFZpcnR1YWxpemVyKHJlc29sdmVkT3B0aW9ucylcbiAgKTtcbiAgaW5zdGFuY2Uuc2V0T3B0aW9ucyhyZXNvbHZlZE9wdGlvbnMpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiBpbnN0YW5jZS5fZGlkTW91bnQoKTtcbiAgfSwgW10pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gaW5zdGFuY2UuX3dpbGxVcGRhdGUoKTtcbiAgfSk7XG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIHVzZVZpcnR1YWxpemVyKG9wdGlvbnMpIHtcbiAgcmV0dXJuIHVzZVZpcnR1YWxpemVyQmFzZSh7XG4gICAgb2JzZXJ2ZUVsZW1lbnRSZWN0LFxuICAgIG9ic2VydmVFbGVtZW50T2Zmc2V0LFxuICAgIHNjcm9sbFRvRm46IGVsZW1lbnRTY3JvbGwsXG4gICAgLi4ub3B0aW9uc1xuICB9KTtcbn1cbmZ1bmN0aW9uIHVzZVdpbmRvd1ZpcnR1YWxpemVyKG9wdGlvbnMpIHtcbiAgcmV0dXJuIHVzZVZpcnR1YWxpemVyQmFzZSh7XG4gICAgZ2V0U2Nyb2xsRWxlbWVudDogKCkgPT4gdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogbnVsbCxcbiAgICBvYnNlcnZlRWxlbWVudFJlY3Q6IG9ic2VydmVXaW5kb3dSZWN0LFxuICAgIG9ic2VydmVFbGVtZW50T2Zmc2V0OiBvYnNlcnZlV2luZG93T2Zmc2V0LFxuICAgIHNjcm9sbFRvRm46IHdpbmRvd1Njcm9sbCxcbiAgICBpbml0aWFsT2Zmc2V0OiB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cuc2Nyb2xsWSA6IHZvaWQgMCxcbiAgICAuLi5vcHRpb25zXG4gIH0pO1xufVxuZXhwb3J0IHtcbiAgdXNlVmlydHVhbGl6ZXIsXG4gIHVzZVdpbmRvd1ZpcnR1YWxpemVyXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJmbHVzaFN5bmMiLCJvYnNlcnZlRWxlbWVudFJlY3QiLCJvYnNlcnZlRWxlbWVudE9mZnNldCIsImVsZW1lbnRTY3JvbGwiLCJvYnNlcnZlV2luZG93UmVjdCIsIm9ic2VydmVXaW5kb3dPZmZzZXQiLCJ3aW5kb3dTY3JvbGwiLCJWaXJ0dWFsaXplciIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJkb2N1bWVudCIsInVzZUxheW91dEVmZmVjdCIsInVzZUVmZmVjdCIsInVzZVZpcnR1YWxpemVyQmFzZSIsIm9wdGlvbnMiLCJyZXJlbmRlciIsInVzZVJlZHVjZXIiLCJyZXNvbHZlZE9wdGlvbnMiLCJvbkNoYW5nZSIsImluc3RhbmNlMiIsInN5bmMiLCJfYSIsImNhbGwiLCJpbnN0YW5jZSIsInVzZVN0YXRlIiwic2V0T3B0aW9ucyIsIl9kaWRNb3VudCIsIl93aWxsVXBkYXRlIiwidXNlVmlydHVhbGl6ZXIiLCJzY3JvbGxUb0ZuIiwidXNlV2luZG93VmlydHVhbGl6ZXIiLCJnZXRTY3JvbGxFbGVtZW50Iiwid2luZG93IiwiaW5pdGlhbE9mZnNldCIsInNjcm9sbFkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-virtual/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tanstack/virtual-core/dist/esm/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Virtualizer: () => (/* binding */ Virtualizer),\n/* harmony export */   approxEqual: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_0__.approxEqual),\n/* harmony export */   defaultKeyExtractor: () => (/* binding */ defaultKeyExtractor),\n/* harmony export */   defaultRangeExtractor: () => (/* binding */ defaultRangeExtractor),\n/* harmony export */   elementScroll: () => (/* binding */ elementScroll),\n/* harmony export */   measureElement: () => (/* binding */ measureElement),\n/* harmony export */   memo: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_0__.memo),\n/* harmony export */   notUndefined: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_0__.notUndefined),\n/* harmony export */   observeElementOffset: () => (/* binding */ observeElementOffset),\n/* harmony export */   observeElementRect: () => (/* binding */ observeElementRect),\n/* harmony export */   observeWindowOffset: () => (/* binding */ observeWindowOffset),\n/* harmony export */   observeWindowRect: () => (/* binding */ observeWindowRect),\n/* harmony export */   windowScroll: () => (/* binding */ windowScroll)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/utils.js\");\n\nconst defaultKeyExtractor = (index)=>index;\nconst defaultRangeExtractor = (range)=>{\n    const start = Math.max(range.startIndex - range.overscan, 0);\n    const end = Math.min(range.endIndex + range.overscan, range.count - 1);\n    const arr = [];\n    for(let i = start; i <= end; i++){\n        arr.push(i);\n    }\n    return arr;\n};\nconst observeElementRect = (instance, cb)=>{\n    const element = instance.scrollElement;\n    if (!element) {\n        return;\n    }\n    const handler = (rect)=>{\n        const { width, height } = rect;\n        cb({\n            width: Math.round(width),\n            height: Math.round(height)\n        });\n    };\n    handler(element.getBoundingClientRect());\n    if (typeof ResizeObserver === \"undefined\") {\n        return ()=>{};\n    }\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        if (entry == null ? void 0 : entry.borderBoxSize) {\n            const box = entry.borderBoxSize[0];\n            if (box) {\n                handler({\n                    width: box.inlineSize,\n                    height: box.blockSize\n                });\n                return;\n            }\n        }\n        handler(element.getBoundingClientRect());\n    });\n    observer.observe(element, {\n        box: \"border-box\"\n    });\n    return ()=>{\n        observer.unobserve(element);\n    };\n};\nconst observeWindowRect = (instance, cb)=>{\n    const element = instance.scrollElement;\n    if (!element) {\n        return;\n    }\n    const handler = ()=>{\n        cb({\n            width: element.innerWidth,\n            height: element.innerHeight\n        });\n    };\n    handler();\n    element.addEventListener(\"resize\", handler, {\n        passive: true\n    });\n    return ()=>{\n        element.removeEventListener(\"resize\", handler);\n    };\n};\nconst observeElementOffset = (instance, cb)=>{\n    const element = instance.scrollElement;\n    if (!element) {\n        return;\n    }\n    const handler = ()=>{\n        cb(element[instance.options.horizontal ? \"scrollLeft\" : \"scrollTop\"]);\n    };\n    handler();\n    element.addEventListener(\"scroll\", handler, {\n        passive: true\n    });\n    return ()=>{\n        element.removeEventListener(\"scroll\", handler);\n    };\n};\nconst observeWindowOffset = (instance, cb)=>{\n    const element = instance.scrollElement;\n    if (!element) {\n        return;\n    }\n    const handler = ()=>{\n        cb(element[instance.options.horizontal ? \"scrollX\" : \"scrollY\"]);\n    };\n    handler();\n    element.addEventListener(\"scroll\", handler, {\n        passive: true\n    });\n    return ()=>{\n        element.removeEventListener(\"scroll\", handler);\n    };\n};\nconst measureElement = (element, entry, instance)=>{\n    if (entry == null ? void 0 : entry.borderBoxSize) {\n        const box = entry.borderBoxSize[0];\n        if (box) {\n            const size = Math.round(box[instance.options.horizontal ? \"inlineSize\" : \"blockSize\"]);\n            return size;\n        }\n    }\n    return Math.round(element.getBoundingClientRect()[instance.options.horizontal ? \"width\" : \"height\"]);\n};\nconst windowScroll = (offset, { adjustments = 0, behavior }, instance)=>{\n    var _a, _b;\n    const toOffset = offset + adjustments;\n    (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n        [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n        behavior\n    });\n};\nconst elementScroll = (offset, { adjustments = 0, behavior }, instance)=>{\n    var _a, _b;\n    const toOffset = offset + adjustments;\n    (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n        [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n        behavior\n    });\n};\nclass Virtualizer {\n    constructor(opts){\n        this.unsubs = [];\n        this.scrollElement = null;\n        this.isScrolling = false;\n        this.isScrollingTimeoutId = null;\n        this.scrollToIndexTimeoutId = null;\n        this.measurementsCache = [];\n        this.itemSizeCache = /* @__PURE__ */ new Map();\n        this.pendingMeasuredCacheIndexes = [];\n        this.scrollDirection = null;\n        this.scrollAdjustments = 0;\n        this.measureElementCache = /* @__PURE__ */ new Map();\n        this.observer = /* @__PURE__ */ (()=>{\n            let _ro = null;\n            const get = ()=>{\n                if (_ro) {\n                    return _ro;\n                } else if (typeof ResizeObserver !== \"undefined\") {\n                    return _ro = new ResizeObserver((entries)=>{\n                        entries.forEach((entry)=>{\n                            this._measureElement(entry.target, entry);\n                        });\n                    });\n                } else {\n                    return null;\n                }\n            };\n            return {\n                disconnect: ()=>{\n                    var _a;\n                    return (_a = get()) == null ? void 0 : _a.disconnect();\n                },\n                observe: (target)=>{\n                    var _a;\n                    return (_a = get()) == null ? void 0 : _a.observe(target, {\n                        box: \"border-box\"\n                    });\n                },\n                unobserve: (target)=>{\n                    var _a;\n                    return (_a = get()) == null ? void 0 : _a.unobserve(target);\n                }\n            };\n        })();\n        this.range = null;\n        this.setOptions = (opts2)=>{\n            Object.entries(opts2).forEach(([key, value])=>{\n                if (typeof value === \"undefined\") delete opts2[key];\n            });\n            this.options = {\n                debug: false,\n                initialOffset: 0,\n                overscan: 1,\n                paddingStart: 0,\n                paddingEnd: 0,\n                scrollPaddingStart: 0,\n                scrollPaddingEnd: 0,\n                horizontal: false,\n                getItemKey: defaultKeyExtractor,\n                rangeExtractor: defaultRangeExtractor,\n                onChange: ()=>{},\n                measureElement,\n                initialRect: {\n                    width: 0,\n                    height: 0\n                },\n                scrollMargin: 0,\n                scrollingDelay: 150,\n                indexAttribute: \"data-index\",\n                initialMeasurementsCache: [],\n                lanes: 1,\n                ...opts2\n            };\n        };\n        this.notify = (sync)=>{\n            var _a, _b;\n            (_b = (_a = this.options).onChange) == null ? void 0 : _b.call(_a, this, sync);\n        };\n        this.maybeNotify = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>{\n            this.calculateRange();\n            return [\n                this.isScrolling,\n                this.range ? this.range.startIndex : null,\n                this.range ? this.range.endIndex : null\n            ];\n        }, (isScrolling)=>{\n            this.notify(isScrolling);\n        }, {\n            key:  true && \"maybeNotify\",\n            debug: ()=>this.options.debug,\n            initialDeps: [\n                this.isScrolling,\n                this.range ? this.range.startIndex : null,\n                this.range ? this.range.endIndex : null\n            ]\n        });\n        this.cleanup = ()=>{\n            this.unsubs.filter(Boolean).forEach((d)=>d());\n            this.unsubs = [];\n            this.scrollElement = null;\n        };\n        this._didMount = ()=>{\n            this.measureElementCache.forEach(this.observer.observe);\n            return ()=>{\n                this.observer.disconnect();\n                this.cleanup();\n            };\n        };\n        this._willUpdate = ()=>{\n            const scrollElement = this.options.getScrollElement();\n            if (this.scrollElement !== scrollElement) {\n                this.cleanup();\n                this.scrollElement = scrollElement;\n                this._scrollToOffset(this.scrollOffset, {\n                    adjustments: void 0,\n                    behavior: void 0\n                });\n                this.unsubs.push(this.options.observeElementRect(this, (rect)=>{\n                    this.scrollRect = rect;\n                    this.maybeNotify();\n                }));\n                this.unsubs.push(this.options.observeElementOffset(this, (offset)=>{\n                    this.scrollAdjustments = 0;\n                    if (this.scrollOffset === offset) {\n                        return;\n                    }\n                    if (this.isScrollingTimeoutId !== null) {\n                        clearTimeout(this.isScrollingTimeoutId);\n                        this.isScrollingTimeoutId = null;\n                    }\n                    this.isScrolling = true;\n                    this.scrollDirection = this.scrollOffset < offset ? \"forward\" : \"backward\";\n                    this.scrollOffset = offset;\n                    this.maybeNotify();\n                    this.isScrollingTimeoutId = setTimeout(()=>{\n                        this.isScrollingTimeoutId = null;\n                        this.isScrolling = false;\n                        this.scrollDirection = null;\n                        this.maybeNotify();\n                    }, this.options.scrollingDelay);\n                }));\n            }\n        };\n        this.getSize = ()=>{\n            return this.scrollRect[this.options.horizontal ? \"width\" : \"height\"];\n        };\n        this.memoOptions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>[\n                this.options.count,\n                this.options.paddingStart,\n                this.options.scrollMargin,\n                this.options.getItemKey\n            ], (count, paddingStart, scrollMargin, getItemKey)=>{\n            this.pendingMeasuredCacheIndexes = [];\n            return {\n                count,\n                paddingStart,\n                scrollMargin,\n                getItemKey\n            };\n        }, {\n            key: false\n        });\n        this.getFurthestMeasurement = (measurements, index)=>{\n            const furthestMeasurementsFound = /* @__PURE__ */ new Map();\n            const furthestMeasurements = /* @__PURE__ */ new Map();\n            for(let m = index - 1; m >= 0; m--){\n                const measurement = measurements[m];\n                if (furthestMeasurementsFound.has(measurement.lane)) {\n                    continue;\n                }\n                const previousFurthestMeasurement = furthestMeasurements.get(measurement.lane);\n                if (previousFurthestMeasurement == null || measurement.end > previousFurthestMeasurement.end) {\n                    furthestMeasurements.set(measurement.lane, measurement);\n                } else if (measurement.end < previousFurthestMeasurement.end) {\n                    furthestMeasurementsFound.set(measurement.lane, true);\n                }\n                if (furthestMeasurementsFound.size === this.options.lanes) {\n                    break;\n                }\n            }\n            return furthestMeasurements.size === this.options.lanes ? Array.from(furthestMeasurements.values()).sort((a, b)=>{\n                if (a.end === b.end) {\n                    return a.index - b.index;\n                }\n                return a.end - b.end;\n            })[0] : void 0;\n        };\n        this.getMeasurements = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>[\n                this.memoOptions(),\n                this.itemSizeCache\n            ], ({ count, paddingStart, scrollMargin, getItemKey }, itemSizeCache)=>{\n            const min = this.pendingMeasuredCacheIndexes.length > 0 ? Math.min(...this.pendingMeasuredCacheIndexes) : 0;\n            this.pendingMeasuredCacheIndexes = [];\n            const measurements = this.measurementsCache.slice(0, min);\n            for(let i = min; i < count; i++){\n                const key = getItemKey(i);\n                const furthestMeasurement = this.options.lanes === 1 ? measurements[i - 1] : this.getFurthestMeasurement(measurements, i);\n                const start = furthestMeasurement ? furthestMeasurement.end : paddingStart + scrollMargin;\n                const measuredSize = itemSizeCache.get(key);\n                const size = typeof measuredSize === \"number\" ? measuredSize : this.options.estimateSize(i);\n                const end = start + size;\n                const lane = furthestMeasurement ? furthestMeasurement.lane : i % this.options.lanes;\n                measurements[i] = {\n                    index: i,\n                    start,\n                    size,\n                    end,\n                    key,\n                    lane\n                };\n            }\n            this.measurementsCache = measurements;\n            return measurements;\n        }, {\n            key:  true && \"getMeasurements\",\n            debug: ()=>this.options.debug\n        });\n        this.calculateRange = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>[\n                this.getMeasurements(),\n                this.getSize(),\n                this.scrollOffset\n            ], (measurements, outerSize, scrollOffset)=>{\n            return this.range = measurements.length > 0 && outerSize > 0 ? calculateRange({\n                measurements,\n                outerSize,\n                scrollOffset\n            }) : null;\n        }, {\n            key:  true && \"calculateRange\",\n            debug: ()=>this.options.debug\n        });\n        this.getIndexes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>[\n                this.options.rangeExtractor,\n                this.calculateRange(),\n                this.options.overscan,\n                this.options.count\n            ], (rangeExtractor, range, overscan, count)=>{\n            return range === null ? [] : rangeExtractor({\n                ...range,\n                overscan,\n                count\n            });\n        }, {\n            key:  true && \"getIndexes\",\n            debug: ()=>this.options.debug\n        });\n        this.indexFromElement = (node)=>{\n            const attributeName = this.options.indexAttribute;\n            const indexStr = node.getAttribute(attributeName);\n            if (!indexStr) {\n                console.warn(`Missing attribute name '${attributeName}={index}' on measured element.`);\n                return -1;\n            }\n            return parseInt(indexStr, 10);\n        };\n        this._measureElement = (node, entry)=>{\n            const item = this.measurementsCache[this.indexFromElement(node)];\n            if (!item || !node.isConnected) {\n                this.measureElementCache.forEach((cached, key)=>{\n                    if (cached === node) {\n                        this.observer.unobserve(node);\n                        this.measureElementCache.delete(key);\n                    }\n                });\n                return;\n            }\n            const prevNode = this.measureElementCache.get(item.key);\n            if (prevNode !== node) {\n                if (prevNode) {\n                    this.observer.unobserve(prevNode);\n                }\n                this.observer.observe(node);\n                this.measureElementCache.set(item.key, node);\n            }\n            const measuredItemSize = this.options.measureElement(node, entry, this);\n            this.resizeItem(item, measuredItemSize);\n        };\n        this.resizeItem = (item, size)=>{\n            const itemSize = this.itemSizeCache.get(item.key) ?? item.size;\n            const delta = size - itemSize;\n            if (delta !== 0) {\n                if (item.start < this.scrollOffset + this.scrollAdjustments) {\n                    if ( true && this.options.debug) {\n                        console.info(\"correction\", delta);\n                    }\n                    this._scrollToOffset(this.scrollOffset, {\n                        adjustments: this.scrollAdjustments += delta,\n                        behavior: void 0\n                    });\n                }\n                this.pendingMeasuredCacheIndexes.push(item.index);\n                this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size));\n                this.notify(false);\n            }\n        };\n        this.measureElement = (node)=>{\n            if (!node) {\n                return;\n            }\n            this._measureElement(node, void 0);\n        };\n        this.getVirtualItems = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>[\n                this.getIndexes(),\n                this.getMeasurements()\n            ], (indexes, measurements)=>{\n            const virtualItems = [];\n            for(let k = 0, len = indexes.length; k < len; k++){\n                const i = indexes[k];\n                const measurement = measurements[i];\n                virtualItems.push(measurement);\n            }\n            return virtualItems;\n        }, {\n            key:  true && \"getIndexes\",\n            debug: ()=>this.options.debug\n        });\n        this.getVirtualItemForOffset = (offset)=>{\n            const measurements = this.getMeasurements();\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.notUndefined)(measurements[findNearestBinarySearch(0, measurements.length - 1, (index)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.notUndefined)(measurements[index]).start, offset)]);\n        };\n        this.getOffsetForAlignment = (toOffset, align)=>{\n            const size = this.getSize();\n            if (align === \"auto\") {\n                if (toOffset <= this.scrollOffset) {\n                    align = \"start\";\n                } else if (toOffset >= this.scrollOffset + size) {\n                    align = \"end\";\n                } else {\n                    align = \"start\";\n                }\n            }\n            if (align === \"start\") {\n                toOffset = toOffset;\n            } else if (align === \"end\") {\n                toOffset = toOffset - size;\n            } else if (align === \"center\") {\n                toOffset = toOffset - size / 2;\n            }\n            const scrollSizeProp = this.options.horizontal ? \"scrollWidth\" : \"scrollHeight\";\n            const scrollSize = this.scrollElement ? \"document\" in this.scrollElement ? this.scrollElement.document.documentElement[scrollSizeProp] : this.scrollElement[scrollSizeProp] : 0;\n            const maxOffset = scrollSize - this.getSize();\n            return Math.max(Math.min(maxOffset, toOffset), 0);\n        };\n        this.getOffsetForIndex = (index, align = \"auto\")=>{\n            index = Math.max(0, Math.min(index, this.options.count - 1));\n            const measurement = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.notUndefined)(this.getMeasurements()[index]);\n            if (align === \"auto\") {\n                if (measurement.end >= this.scrollOffset + this.getSize() - this.options.scrollPaddingEnd) {\n                    align = \"end\";\n                } else if (measurement.start <= this.scrollOffset + this.options.scrollPaddingStart) {\n                    align = \"start\";\n                } else {\n                    return [\n                        this.scrollOffset,\n                        align\n                    ];\n                }\n            }\n            const toOffset = align === \"end\" ? measurement.end + this.options.scrollPaddingEnd : measurement.start - this.options.scrollPaddingStart;\n            return [\n                this.getOffsetForAlignment(toOffset, align),\n                align\n            ];\n        };\n        this.isDynamicMode = ()=>this.measureElementCache.size > 0;\n        this.cancelScrollToIndex = ()=>{\n            if (this.scrollToIndexTimeoutId !== null) {\n                clearTimeout(this.scrollToIndexTimeoutId);\n                this.scrollToIndexTimeoutId = null;\n            }\n        };\n        this.scrollToOffset = (toOffset, { align = \"start\", behavior } = {})=>{\n            this.cancelScrollToIndex();\n            if (behavior === \"smooth\" && this.isDynamicMode()) {\n                console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n            }\n            this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n                adjustments: void 0,\n                behavior\n            });\n        };\n        this.scrollToIndex = (index, { align: initialAlign = \"auto\", behavior } = {})=>{\n            index = Math.max(0, Math.min(index, this.options.count - 1));\n            this.cancelScrollToIndex();\n            if (behavior === \"smooth\" && this.isDynamicMode()) {\n                console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n            }\n            const [toOffset, align] = this.getOffsetForIndex(index, initialAlign);\n            this._scrollToOffset(toOffset, {\n                adjustments: void 0,\n                behavior\n            });\n            if (behavior !== \"smooth\" && this.isDynamicMode()) {\n                this.scrollToIndexTimeoutId = setTimeout(()=>{\n                    this.scrollToIndexTimeoutId = null;\n                    const elementInDOM = this.measureElementCache.has(this.options.getItemKey(index));\n                    if (elementInDOM) {\n                        const [toOffset2] = this.getOffsetForIndex(index, align);\n                        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.approxEqual)(toOffset2, this.scrollOffset)) {\n                            this.scrollToIndex(index, {\n                                align,\n                                behavior\n                            });\n                        }\n                    } else {\n                        this.scrollToIndex(index, {\n                            align,\n                            behavior\n                        });\n                    }\n                });\n            }\n        };\n        this.scrollBy = (delta, { behavior } = {})=>{\n            this.cancelScrollToIndex();\n            if (behavior === \"smooth\" && this.isDynamicMode()) {\n                console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n            }\n            this._scrollToOffset(this.scrollOffset + delta, {\n                adjustments: void 0,\n                behavior\n            });\n        };\n        this.getTotalSize = ()=>{\n            var _a;\n            const measurements = this.getMeasurements();\n            let end;\n            if (measurements.length === 0) {\n                end = this.options.paddingStart;\n            } else {\n                end = this.options.lanes === 1 ? ((_a = measurements[measurements.length - 1]) == null ? void 0 : _a.end) ?? 0 : Math.max(...measurements.slice(-this.options.lanes).map((m)=>m.end));\n            }\n            return end - this.options.scrollMargin + this.options.paddingEnd;\n        };\n        this._scrollToOffset = (offset, { adjustments, behavior })=>{\n            this.options.scrollToFn(offset, {\n                behavior,\n                adjustments\n            }, this);\n        };\n        this.measure = ()=>{\n            this.itemSizeCache = /* @__PURE__ */ new Map();\n            this.notify(false);\n        };\n        this.setOptions(opts);\n        this.scrollRect = this.options.initialRect;\n        this.scrollOffset = this.options.initialOffset;\n        this.measurementsCache = this.options.initialMeasurementsCache;\n        this.measurementsCache.forEach((item)=>{\n            this.itemSizeCache.set(item.key, item.size);\n        });\n        this.maybeNotify();\n    }\n}\nconst findNearestBinarySearch = (low, high, getCurrentValue, value)=>{\n    while(low <= high){\n        const middle = (low + high) / 2 | 0;\n        const currentValue = getCurrentValue(middle);\n        if (currentValue < value) {\n            low = middle + 1;\n        } else if (currentValue > value) {\n            high = middle - 1;\n        } else {\n            return middle;\n        }\n    }\n    if (low > 0) {\n        return low - 1;\n    } else {\n        return 0;\n    }\n};\nfunction calculateRange({ measurements, outerSize, scrollOffset }) {\n    const count = measurements.length - 1;\n    const getOffset = (index)=>measurements[index].start;\n    const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset);\n    let endIndex = startIndex;\n    while(endIndex < count && measurements[endIndex].end < scrollOffset + outerSize){\n        endIndex++;\n    }\n    return {\n        startIndex,\n        endIndex\n    };\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3ZpcnR1YWwtY29yZS9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUE2RDtBQUM3RCxNQUFNRyxzQkFBc0IsQ0FBQ0MsUUFBVUE7QUFDdkMsTUFBTUMsd0JBQXdCLENBQUNDO0lBQzdCLE1BQU1DLFFBQVFDLEtBQUtDLEdBQUcsQ0FBQ0gsTUFBTUksVUFBVSxHQUFHSixNQUFNSyxRQUFRLEVBQUU7SUFDMUQsTUFBTUMsTUFBTUosS0FBS0ssR0FBRyxDQUFDUCxNQUFNUSxRQUFRLEdBQUdSLE1BQU1LLFFBQVEsRUFBRUwsTUFBTVMsS0FBSyxHQUFHO0lBQ3BFLE1BQU1DLE1BQU0sRUFBRTtJQUNkLElBQUssSUFBSUMsSUFBSVYsT0FBT1UsS0FBS0wsS0FBS0ssSUFBSztRQUNqQ0QsSUFBSUUsSUFBSSxDQUFDRDtJQUNYO0lBQ0EsT0FBT0Q7QUFDVDtBQUNBLE1BQU1HLHFCQUFxQixDQUFDQyxVQUFVQztJQUNwQyxNQUFNQyxVQUFVRixTQUFTRyxhQUFhO0lBQ3RDLElBQUksQ0FBQ0QsU0FBUztRQUNaO0lBQ0Y7SUFDQSxNQUFNRSxVQUFVLENBQUNDO1FBQ2YsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRSxHQUFHRjtRQUMxQkosR0FBRztZQUFFSyxPQUFPbEIsS0FBS29CLEtBQUssQ0FBQ0Y7WUFBUUMsUUFBUW5CLEtBQUtvQixLQUFLLENBQUNEO1FBQVE7SUFDNUQ7SUFDQUgsUUFBUUYsUUFBUU8scUJBQXFCO0lBQ3JDLElBQUksT0FBT0MsbUJBQW1CLGFBQWE7UUFDekMsT0FBTyxLQUNQO0lBQ0Y7SUFDQSxNQUFNQyxXQUFXLElBQUlELGVBQWUsQ0FBQ0U7UUFDbkMsTUFBTUMsUUFBUUQsT0FBTyxDQUFDLEVBQUU7UUFDeEIsSUFBSUMsU0FBUyxPQUFPLEtBQUssSUFBSUEsTUFBTUMsYUFBYSxFQUFFO1lBQ2hELE1BQU1DLE1BQU1GLE1BQU1DLGFBQWEs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aUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyX3Nob3djYXNlLy4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay92aXJ0dWFsLWNvcmUvZGlzdC9lc20vaW5kZXguanM/YjY5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtZW1vLCBub3RVbmRlZmluZWQsIGFwcHJveEVxdWFsIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmNvbnN0IGRlZmF1bHRLZXlFeHRyYWN0b3IgPSAoaW5kZXgpID0+IGluZGV4O1xuY29uc3QgZGVmYXVsdFJhbmdlRXh0cmFjdG9yID0gKHJhbmdlKSA9PiB7XG4gIGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgocmFuZ2Uuc3RhcnRJbmRleCAtIHJhbmdlLm92ZXJzY2FuLCAwKTtcbiAgY29uc3QgZW5kID0gTWF0aC5taW4ocmFuZ2UuZW5kSW5kZXggKyByYW5nZS5vdmVyc2NhbiwgcmFuZ2UuY291bnQgLSAxKTtcbiAgY29uc3QgYXJyID0gW107XG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKykge1xuICAgIGFyci5wdXNoKGkpO1xuICB9XG4gIHJldHVybiBhcnI7XG59O1xuY29uc3Qgb2JzZXJ2ZUVsZW1lbnRSZWN0ID0gKGluc3RhbmNlLCBjYikgPT4ge1xuICBjb25zdCBlbGVtZW50ID0gaW5zdGFuY2Uuc2Nyb2xsRWxlbWVudDtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGhhbmRsZXIgPSAocmVjdCkgPT4ge1xuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gcmVjdDtcbiAgICBjYih7IHdpZHRoOiBNYXRoLnJvdW5kKHdpZHRoKSwgaGVpZ2h0OiBNYXRoLnJvdW5kKGhlaWdodCkgfSk7XG4gIH07XG4gIGhhbmRsZXIoZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XG4gIGlmICh0eXBlb2YgUmVzaXplT2JzZXJ2ZXIgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgIH07XG4gIH1cbiAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcbiAgICBjb25zdCBlbnRyeSA9IGVudHJpZXNbMF07XG4gICAgaWYgKGVudHJ5ID09IG51bGwgPyB2b2lkIDAgOiBlbnRyeS5ib3JkZXJCb3hTaXplKSB7XG4gICAgICBjb25zdCBib3ggPSBlbnRyeS5ib3JkZXJCb3hTaXplWzBdO1xuICAgICAgaWYgKGJveCkge1xuICAgICAgICBoYW5kbGVyKHsgd2lkdGg6IGJveC5pbmxpbmVTaXplLCBoZWlnaHQ6IGJveC5ibG9ja1NpemUgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlcihlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcbiAgfSk7XG4gIG9ic2VydmVyLm9ic2VydmUoZWxlbWVudCwgeyBib3g6IFwiYm9yZGVyLWJveFwiIH0pO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIG9ic2VydmVyLnVub2JzZXJ2ZShlbGVtZW50KTtcbiAgfTtcbn07XG5jb25zdCBvYnNlcnZlV2luZG93UmVjdCA9IChpbnN0YW5jZSwgY2IpID0+IHtcbiAgY29uc3QgZWxlbWVudCA9IGluc3RhbmNlLnNjcm9sbEVsZW1lbnQ7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBoYW5kbGVyID0gKCkgPT4ge1xuICAgIGNiKHsgd2lkdGg6IGVsZW1lbnQuaW5uZXJXaWR0aCwgaGVpZ2h0OiBlbGVtZW50LmlubmVySGVpZ2h0IH0pO1xuICB9O1xuICBoYW5kbGVyKCk7XG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBoYW5kbGVyLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaGFuZGxlcik7XG4gIH07XG59O1xuY29uc3Qgb2JzZXJ2ZUVsZW1lbnRPZmZzZXQgPSAoaW5zdGFuY2UsIGNiKSA9PiB7XG4gIGNvbnN0IGVsZW1lbnQgPSBpbnN0YW5jZS5zY3JvbGxFbGVtZW50O1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgaGFuZGxlciA9ICgpID0+IHtcbiAgICBjYihlbGVtZW50W2luc3RhbmNlLm9wdGlvbnMuaG9yaXpvbnRhbCA/IFwic2Nyb2xsTGVmdFwiIDogXCJzY3JvbGxUb3BcIl0pO1xuICB9O1xuICBoYW5kbGVyKCk7XG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBoYW5kbGVyLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgaGFuZGxlcik7XG4gIH07XG59O1xuY29uc3Qgb2JzZXJ2ZVdpbmRvd09mZnNldCA9IChpbnN0YW5jZSwgY2IpID0+IHtcbiAgY29uc3QgZWxlbWVudCA9IGluc3RhbmNlLnNjcm9sbEVsZW1lbnQ7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBoYW5kbGVyID0gKCkgPT4ge1xuICAgIGNiKGVsZW1lbnRbaW5zdGFuY2Uub3B0aW9ucy5ob3Jpem9udGFsID8gXCJzY3JvbGxYXCIgOiBcInNjcm9sbFlcIl0pO1xuICB9O1xuICBoYW5kbGVyKCk7XG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBoYW5kbGVyLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgaGFuZGxlcik7XG4gIH07XG59O1xuY29uc3QgbWVhc3VyZUVsZW1lbnQgPSAoZWxlbWVudCwgZW50cnksIGluc3RhbmNlKSA9PiB7XG4gIGlmIChlbnRyeSA9PSBudWxsID8gdm9pZCAwIDogZW50cnkuYm9yZGVyQm94U2l6ZSkge1xuICAgIGNvbnN0IGJveCA9IGVudHJ5LmJvcmRlckJveFNpemVbMF07XG4gICAgaWYgKGJveCkge1xuICAgICAgY29uc3Qgc2l6ZSA9IE1hdGgucm91bmQoXG4gICAgICAgIGJveFtpbnN0YW5jZS5vcHRpb25zLmhvcml6b250YWwgPyBcImlubGluZVNpemVcIiA6IFwiYmxvY2tTaXplXCJdXG4gICAgICApO1xuICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxuICB9XG4gIHJldHVybiBNYXRoLnJvdW5kKFxuICAgIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbaW5zdGFuY2Uub3B0aW9ucy5ob3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl1cbiAgKTtcbn07XG5jb25zdCB3aW5kb3dTY3JvbGwgPSAob2Zmc2V0LCB7XG4gIGFkanVzdG1lbnRzID0gMCxcbiAgYmVoYXZpb3Jcbn0sIGluc3RhbmNlKSA9PiB7XG4gIHZhciBfYSwgX2I7XG4gIGNvbnN0IHRvT2Zmc2V0ID0gb2Zmc2V0ICsgYWRqdXN0bWVudHM7XG4gIChfYiA9IChfYSA9IGluc3RhbmNlLnNjcm9sbEVsZW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfYS5zY3JvbGxUbykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHtcbiAgICBbaW5zdGFuY2Uub3B0aW9ucy5ob3Jpem9udGFsID8gXCJsZWZ0XCIgOiBcInRvcFwiXTogdG9PZmZzZXQsXG4gICAgYmVoYXZpb3JcbiAgfSk7XG59O1xuY29uc3QgZWxlbWVudFNjcm9sbCA9IChvZmZzZXQsIHtcbiAgYWRqdXN0bWVudHMgPSAwLFxuICBiZWhhdmlvclxufSwgaW5zdGFuY2UpID0+IHtcbiAgdmFyIF9hLCBfYjtcbiAgY29uc3QgdG9PZmZzZXQgPSBvZmZzZXQgKyBhZGp1c3RtZW50cztcbiAgKF9iID0gKF9hID0gaW5zdGFuY2Uuc2Nyb2xsRWxlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnNjcm9sbFRvKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYSwge1xuICAgIFtpbnN0YW5jZS5vcHRpb25zLmhvcml6b250YWwgPyBcImxlZnRcIiA6IFwidG9wXCJdOiB0b09mZnNldCxcbiAgICBiZWhhdmlvclxuICB9KTtcbn07XG5jbGFzcyBWaXJ0dWFsaXplciB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICB0aGlzLnVuc3VicyA9IFtdO1xuICAgIHRoaXMuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgIHRoaXMuaXNTY3JvbGxpbmdUaW1lb3V0SWQgPSBudWxsO1xuICAgIHRoaXMuc2Nyb2xsVG9JbmRleFRpbWVvdXRJZCA9IG51bGw7XG4gICAgdGhpcy5tZWFzdXJlbWVudHNDYWNoZSA9IFtdO1xuICAgIHRoaXMuaXRlbVNpemVDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgdGhpcy5wZW5kaW5nTWVhc3VyZWRDYWNoZUluZGV4ZXMgPSBbXTtcbiAgICB0aGlzLnNjcm9sbERpcmVjdGlvbiA9IG51bGw7XG4gICAgdGhpcy5zY3JvbGxBZGp1c3RtZW50cyA9IDA7XG4gICAgdGhpcy5tZWFzdXJlRWxlbWVudENhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICB0aGlzLm9ic2VydmVyID0gLyogQF9fUFVSRV9fICovICgoKSA9PiB7XG4gICAgICBsZXQgX3JvID0gbnVsbDtcbiAgICAgIGNvbnN0IGdldCA9ICgpID0+IHtcbiAgICAgICAgaWYgKF9ybykge1xuICAgICAgICAgIHJldHVybiBfcm87XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIFJlc2l6ZU9ic2VydmVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgcmV0dXJuIF9ybyA9IG5ldyBSZXNpemVPYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLl9tZWFzdXJlRWxlbWVudChlbnRyeS50YXJnZXQsIGVudHJ5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGlzY29ubmVjdDogKCkgPT4ge1xuICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICByZXR1cm4gKF9hID0gZ2V0KCkpID09IG51bGwgPyB2b2lkIDAgOiBfYS5kaXNjb25uZWN0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9ic2VydmU6ICh0YXJnZXQpID0+IHtcbiAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgcmV0dXJuIChfYSA9IGdldCgpKSA9PSBudWxsID8gdm9pZCAwIDogX2Eub2JzZXJ2ZSh0YXJnZXQsIHsgYm94OiBcImJvcmRlci1ib3hcIiB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5vYnNlcnZlOiAodGFyZ2V0KSA9PiB7XG4gICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgIHJldHVybiAoX2EgPSBnZXQoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnVub2JzZXJ2ZSh0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCk7XG4gICAgdGhpcy5yYW5nZSA9IG51bGw7XG4gICAgdGhpcy5zZXRPcHRpb25zID0gKG9wdHMyKSA9PiB7XG4gICAgICBPYmplY3QuZW50cmllcyhvcHRzMikuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgZGVsZXRlIG9wdHMyW2tleV07XG4gICAgICB9KTtcbiAgICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgICAgZGVidWc6IGZhbHNlLFxuICAgICAgICBpbml0aWFsT2Zmc2V0OiAwLFxuICAgICAgICBvdmVyc2NhbjogMSxcbiAgICAgICAgcGFkZGluZ1N0YXJ0OiAwLFxuICAgICAgICBwYWRkaW5nRW5kOiAwLFxuICAgICAgICBzY3JvbGxQYWRkaW5nU3RhcnQ6IDAsXG4gICAgICAgIHNjcm9sbFBhZGRpbmdFbmQ6IDAsXG4gICAgICAgIGhvcml6b250YWw6IGZhbHNlLFxuICAgICAgICBnZXRJdGVtS2V5OiBkZWZhdWx0S2V5RXh0cmFjdG9yLFxuICAgICAgICByYW5nZUV4dHJhY3RvcjogZGVmYXVsdFJhbmdlRXh0cmFjdG9yLFxuICAgICAgICBvbkNoYW5nZTogKCkgPT4ge1xuICAgICAgICB9LFxuICAgICAgICBtZWFzdXJlRWxlbWVudCxcbiAgICAgICAgaW5pdGlhbFJlY3Q6IHsgd2lkdGg6IDAsIGhlaWdodDogMCB9LFxuICAgICAgICBzY3JvbGxNYXJnaW46IDAsXG4gICAgICAgIHNjcm9sbGluZ0RlbGF5OiAxNTAsXG4gICAgICAgIGluZGV4QXR0cmlidXRlOiBcImRhdGEtaW5kZXhcIixcbiAgICAgICAgaW5pdGlhbE1lYXN1cmVtZW50c0NhY2hlOiBbXSxcbiAgICAgICAgbGFuZXM6IDEsXG4gICAgICAgIC4uLm9wdHMyXG4gICAgICB9O1xuICAgIH07XG4gICAgdGhpcy5ub3RpZnkgPSAoc3luYykgPT4ge1xuICAgICAgdmFyIF9hLCBfYjtcbiAgICAgIChfYiA9IChfYSA9IHRoaXMub3B0aW9ucykub25DaGFuZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCB0aGlzLCBzeW5jKTtcbiAgICB9O1xuICAgIHRoaXMubWF5YmVOb3RpZnkgPSBtZW1vKFxuICAgICAgKCkgPT4ge1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZVJhbmdlKCk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgdGhpcy5pc1Njcm9sbGluZyxcbiAgICAgICAgICB0aGlzLnJhbmdlID8gdGhpcy5yYW5nZS5zdGFydEluZGV4IDogbnVsbCxcbiAgICAgICAgICB0aGlzLnJhbmdlID8gdGhpcy5yYW5nZS5lbmRJbmRleCA6IG51bGxcbiAgICAgICAgXTtcbiAgICAgIH0sXG4gICAgICAoaXNTY3JvbGxpbmcpID0+IHtcbiAgICAgICAgdGhpcy5ub3RpZnkoaXNTY3JvbGxpbmcpO1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgXCJtYXliZU5vdGlmeVwiLFxuICAgICAgICBkZWJ1ZzogKCkgPT4gdGhpcy5vcHRpb25zLmRlYnVnLFxuICAgICAgICBpbml0aWFsRGVwczogW1xuICAgICAgICAgIHRoaXMuaXNTY3JvbGxpbmcsXG4gICAgICAgICAgdGhpcy5yYW5nZSA/IHRoaXMucmFuZ2Uuc3RhcnRJbmRleCA6IG51bGwsXG4gICAgICAgICAgdGhpcy5yYW5nZSA/IHRoaXMucmFuZ2UuZW5kSW5kZXggOiBudWxsXG4gICAgICAgIF1cbiAgICAgIH1cbiAgICApO1xuICAgIHRoaXMuY2xlYW51cCA9ICgpID0+IHtcbiAgICAgIHRoaXMudW5zdWJzLmZpbHRlcihCb29sZWFuKS5mb3JFYWNoKChkKSA9PiBkKCkpO1xuICAgICAgdGhpcy51bnN1YnMgPSBbXTtcbiAgICAgIHRoaXMuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gICAgfTtcbiAgICB0aGlzLl9kaWRNb3VudCA9ICgpID0+IHtcbiAgICAgIHRoaXMubWVhc3VyZUVsZW1lbnRDYWNoZS5mb3JFYWNoKHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgICB9O1xuICAgIH07XG4gICAgdGhpcy5fd2lsbFVwZGF0ZSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHNjcm9sbEVsZW1lbnQgPSB0aGlzLm9wdGlvbnMuZ2V0U2Nyb2xsRWxlbWVudCgpO1xuICAgICAgaWYgKHRoaXMuc2Nyb2xsRWxlbWVudCAhPT0gc2Nyb2xsRWxlbWVudCkge1xuICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgdGhpcy5zY3JvbGxFbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgICAgICAgdGhpcy5fc2Nyb2xsVG9PZmZzZXQodGhpcy5zY3JvbGxPZmZzZXQsIHtcbiAgICAgICAgICBhZGp1c3RtZW50czogdm9pZCAwLFxuICAgICAgICAgIGJlaGF2aW9yOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudW5zdWJzLnB1c2goXG4gICAgICAgICAgdGhpcy5vcHRpb25zLm9ic2VydmVFbGVtZW50UmVjdCh0aGlzLCAocmVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxSZWN0ID0gcmVjdDtcbiAgICAgICAgICAgIHRoaXMubWF5YmVOb3RpZnkoKTtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnVuc3Vicy5wdXNoKFxuICAgICAgICAgIHRoaXMub3B0aW9ucy5vYnNlcnZlRWxlbWVudE9mZnNldCh0aGlzLCAob2Zmc2V0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbEFkanVzdG1lbnRzID0gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLnNjcm9sbE9mZnNldCA9PT0gb2Zmc2V0KSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmlzU2Nyb2xsaW5nVGltZW91dElkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmlzU2Nyb2xsaW5nVGltZW91dElkKTtcbiAgICAgICAgICAgICAgdGhpcy5pc1Njcm9sbGluZ1RpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmlzU2Nyb2xsaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsRGlyZWN0aW9uID0gdGhpcy5zY3JvbGxPZmZzZXQgPCBvZmZzZXQgPyBcImZvcndhcmRcIiA6IFwiYmFja3dhcmRcIjtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsT2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICAgICAgdGhpcy5tYXliZU5vdGlmeSgpO1xuICAgICAgICAgICAgdGhpcy5pc1Njcm9sbGluZ1RpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmlzU2Nyb2xsaW5nVGltZW91dElkID0gbnVsbDtcbiAgICAgICAgICAgICAgdGhpcy5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICB0aGlzLnNjcm9sbERpcmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgIHRoaXMubWF5YmVOb3RpZnkoKTtcbiAgICAgICAgICAgIH0sIHRoaXMub3B0aW9ucy5zY3JvbGxpbmdEZWxheSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuZ2V0U2l6ZSA9ICgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLnNjcm9sbFJlY3RbdGhpcy5vcHRpb25zLmhvcml6b250YWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiXTtcbiAgICB9O1xuICAgIHRoaXMubWVtb09wdGlvbnMgPSBtZW1vKFxuICAgICAgKCkgPT4gW1xuICAgICAgICB0aGlzLm9wdGlvbnMuY291bnQsXG4gICAgICAgIHRoaXMub3B0aW9ucy5wYWRkaW5nU3RhcnQsXG4gICAgICAgIHRoaXMub3B0aW9ucy5zY3JvbGxNYXJnaW4sXG4gICAgICAgIHRoaXMub3B0aW9ucy5nZXRJdGVtS2V5XG4gICAgICBdLFxuICAgICAgKGNvdW50LCBwYWRkaW5nU3RhcnQsIHNjcm9sbE1hcmdpbiwgZ2V0SXRlbUtleSkgPT4ge1xuICAgICAgICB0aGlzLnBlbmRpbmdNZWFzdXJlZENhY2hlSW5kZXhlcyA9IFtdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvdW50LFxuICAgICAgICAgIHBhZGRpbmdTdGFydCxcbiAgICAgICAgICBzY3JvbGxNYXJnaW4sXG4gICAgICAgICAgZ2V0SXRlbUtleVxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiBmYWxzZVxuICAgICAgfVxuICAgICk7XG4gICAgdGhpcy5nZXRGdXJ0aGVzdE1lYXN1cmVtZW50ID0gKG1lYXN1cmVtZW50cywgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGZ1cnRoZXN0TWVhc3VyZW1lbnRzRm91bmQgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgY29uc3QgZnVydGhlc3RNZWFzdXJlbWVudHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgZm9yIChsZXQgbSA9IGluZGV4IC0gMTsgbSA+PSAwOyBtLS0pIHtcbiAgICAgICAgY29uc3QgbWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudHNbbV07XG4gICAgICAgIGlmIChmdXJ0aGVzdE1lYXN1cmVtZW50c0ZvdW5kLmhhcyhtZWFzdXJlbWVudC5sYW5lKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZXZpb3VzRnVydGhlc3RNZWFzdXJlbWVudCA9IGZ1cnRoZXN0TWVhc3VyZW1lbnRzLmdldChcbiAgICAgICAgICBtZWFzdXJlbWVudC5sYW5lXG4gICAgICAgICk7XG4gICAgICAgIGlmIChwcmV2aW91c0Z1cnRoZXN0TWVhc3VyZW1lbnQgPT0gbnVsbCB8fCBtZWFzdXJlbWVudC5lbmQgPiBwcmV2aW91c0Z1cnRoZXN0TWVhc3VyZW1lbnQuZW5kKSB7XG4gICAgICAgICAgZnVydGhlc3RNZWFzdXJlbWVudHMuc2V0KG1lYXN1cmVtZW50LmxhbmUsIG1lYXN1cmVtZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChtZWFzdXJlbWVudC5lbmQgPCBwcmV2aW91c0Z1cnRoZXN0TWVhc3VyZW1lbnQuZW5kKSB7XG4gICAgICAgICAgZnVydGhlc3RNZWFzdXJlbWVudHNGb3VuZC5zZXQobWVhc3VyZW1lbnQubGFuZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZ1cnRoZXN0TWVhc3VyZW1lbnRzRm91bmQuc2l6ZSA9PT0gdGhpcy5vcHRpb25zLmxhbmVzKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmdXJ0aGVzdE1lYXN1cmVtZW50cy5zaXplID09PSB0aGlzLm9wdGlvbnMubGFuZXMgPyBBcnJheS5mcm9tKGZ1cnRoZXN0TWVhc3VyZW1lbnRzLnZhbHVlcygpKS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIGlmIChhLmVuZCA9PT0gYi5lbmQpIHtcbiAgICAgICAgICByZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGEuZW5kIC0gYi5lbmQ7XG4gICAgICB9KVswXSA6IHZvaWQgMDtcbiAgICB9O1xuICAgIHRoaXMuZ2V0TWVhc3VyZW1lbnRzID0gbWVtbyhcbiAgICAgICgpID0+IFt0aGlzLm1lbW9PcHRpb25zKCksIHRoaXMuaXRlbVNpemVDYWNoZV0sXG4gICAgICAoeyBjb3VudCwgcGFkZGluZ1N0YXJ0LCBzY3JvbGxNYXJnaW4sIGdldEl0ZW1LZXkgfSwgaXRlbVNpemVDYWNoZSkgPT4ge1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLnBlbmRpbmdNZWFzdXJlZENhY2hlSW5kZXhlcy5sZW5ndGggPiAwID8gTWF0aC5taW4oLi4udGhpcy5wZW5kaW5nTWVhc3VyZWRDYWNoZUluZGV4ZXMpIDogMDtcbiAgICAgICAgdGhpcy5wZW5kaW5nTWVhc3VyZWRDYWNoZUluZGV4ZXMgPSBbXTtcbiAgICAgICAgY29uc3QgbWVhc3VyZW1lbnRzID0gdGhpcy5tZWFzdXJlbWVudHNDYWNoZS5zbGljZSgwLCBtaW4pO1xuICAgICAgICBmb3IgKGxldCBpID0gbWluOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGtleSA9IGdldEl0ZW1LZXkoaSk7XG4gICAgICAgICAgY29uc3QgZnVydGhlc3RNZWFzdXJlbWVudCA9IHRoaXMub3B0aW9ucy5sYW5lcyA9PT0gMSA/IG1lYXN1cmVtZW50c1tpIC0gMV0gOiB0aGlzLmdldEZ1cnRoZXN0TWVhc3VyZW1lbnQobWVhc3VyZW1lbnRzLCBpKTtcbiAgICAgICAgICBjb25zdCBzdGFydCA9IGZ1cnRoZXN0TWVhc3VyZW1lbnQgPyBmdXJ0aGVzdE1lYXN1cmVtZW50LmVuZCA6IHBhZGRpbmdTdGFydCArIHNjcm9sbE1hcmdpbjtcbiAgICAgICAgICBjb25zdCBtZWFzdXJlZFNpemUgPSBpdGVtU2l6ZUNhY2hlLmdldChrZXkpO1xuICAgICAgICAgIGNvbnN0IHNpemUgPSB0eXBlb2YgbWVhc3VyZWRTaXplID09PSBcIm51bWJlclwiID8gbWVhc3VyZWRTaXplIDogdGhpcy5vcHRpb25zLmVzdGltYXRlU2l6ZShpKTtcbiAgICAgICAgICBjb25zdCBlbmQgPSBzdGFydCArIHNpemU7XG4gICAgICAgICAgY29uc3QgbGFuZSA9IGZ1cnRoZXN0TWVhc3VyZW1lbnQgPyBmdXJ0aGVzdE1lYXN1cmVtZW50LmxhbmUgOiBpICUgdGhpcy5vcHRpb25zLmxhbmVzO1xuICAgICAgICAgIG1lYXN1cmVtZW50c1tpXSA9IHtcbiAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgZW5kLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgbGFuZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tZWFzdXJlbWVudHNDYWNoZSA9IG1lYXN1cmVtZW50cztcbiAgICAgICAgcmV0dXJuIG1lYXN1cmVtZW50cztcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGtleTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIFwiZ2V0TWVhc3VyZW1lbnRzXCIsXG4gICAgICAgIGRlYnVnOiAoKSA9PiB0aGlzLm9wdGlvbnMuZGVidWdcbiAgICAgIH1cbiAgICApO1xuICAgIHRoaXMuY2FsY3VsYXRlUmFuZ2UgPSBtZW1vKFxuICAgICAgKCkgPT4gW3RoaXMuZ2V0TWVhc3VyZW1lbnRzKCksIHRoaXMuZ2V0U2l6ZSgpLCB0aGlzLnNjcm9sbE9mZnNldF0sXG4gICAgICAobWVhc3VyZW1lbnRzLCBvdXRlclNpemUsIHNjcm9sbE9mZnNldCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZSA9IG1lYXN1cmVtZW50cy5sZW5ndGggPiAwICYmIG91dGVyU2l6ZSA+IDAgPyBjYWxjdWxhdGVSYW5nZSh7XG4gICAgICAgICAgbWVhc3VyZW1lbnRzLFxuICAgICAgICAgIG91dGVyU2l6ZSxcbiAgICAgICAgICBzY3JvbGxPZmZzZXRcbiAgICAgICAgfSkgOiBudWxsO1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgXCJjYWxjdWxhdGVSYW5nZVwiLFxuICAgICAgICBkZWJ1ZzogKCkgPT4gdGhpcy5vcHRpb25zLmRlYnVnXG4gICAgICB9XG4gICAgKTtcbiAgICB0aGlzLmdldEluZGV4ZXMgPSBtZW1vKFxuICAgICAgKCkgPT4gW1xuICAgICAgICB0aGlzLm9wdGlvbnMucmFuZ2VFeHRyYWN0b3IsXG4gICAgICAgIHRoaXMuY2FsY3VsYXRlUmFuZ2UoKSxcbiAgICAgICAgdGhpcy5vcHRpb25zLm92ZXJzY2FuLFxuICAgICAgICB0aGlzLm9wdGlvbnMuY291bnRcbiAgICAgIF0sXG4gICAgICAocmFuZ2VFeHRyYWN0b3IsIHJhbmdlLCBvdmVyc2NhbiwgY291bnQpID0+IHtcbiAgICAgICAgcmV0dXJuIHJhbmdlID09PSBudWxsID8gW10gOiByYW5nZUV4dHJhY3Rvcih7XG4gICAgICAgICAgLi4ucmFuZ2UsXG4gICAgICAgICAgb3ZlcnNjYW4sXG4gICAgICAgICAgY291bnRcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBrZXk6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBcImdldEluZGV4ZXNcIixcbiAgICAgICAgZGVidWc6ICgpID0+IHRoaXMub3B0aW9ucy5kZWJ1Z1xuICAgICAgfVxuICAgICk7XG4gICAgdGhpcy5pbmRleEZyb21FbGVtZW50ID0gKG5vZGUpID0+IHtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZU5hbWUgPSB0aGlzLm9wdGlvbnMuaW5kZXhBdHRyaWJ1dGU7XG4gICAgICBjb25zdCBpbmRleFN0ciA9IG5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgaWYgKCFpbmRleFN0cikge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYE1pc3NpbmcgYXR0cmlidXRlIG5hbWUgJyR7YXR0cmlidXRlTmFtZX09e2luZGV4fScgb24gbWVhc3VyZWQgZWxlbWVudC5gXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJzZUludChpbmRleFN0ciwgMTApO1xuICAgIH07XG4gICAgdGhpcy5fbWVhc3VyZUVsZW1lbnQgPSAobm9kZSwgZW50cnkpID0+IHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLm1lYXN1cmVtZW50c0NhY2hlW3RoaXMuaW5kZXhGcm9tRWxlbWVudChub2RlKV07XG4gICAgICBpZiAoIWl0ZW0gfHwgIW5vZGUuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgdGhpcy5tZWFzdXJlRWxlbWVudENhY2hlLmZvckVhY2goKGNhY2hlZCwga2V5KSA9PiB7XG4gICAgICAgICAgaWYgKGNhY2hlZCA9PT0gbm9kZSkge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlci51bm9ic2VydmUobm9kZSk7XG4gICAgICAgICAgICB0aGlzLm1lYXN1cmVFbGVtZW50Q2FjaGUuZGVsZXRlKGtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJldk5vZGUgPSB0aGlzLm1lYXN1cmVFbGVtZW50Q2FjaGUuZ2V0KGl0ZW0ua2V5KTtcbiAgICAgIGlmIChwcmV2Tm9kZSAhPT0gbm9kZSkge1xuICAgICAgICBpZiAocHJldk5vZGUpIHtcbiAgICAgICAgICB0aGlzLm9ic2VydmVyLnVub2JzZXJ2ZShwcmV2Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKG5vZGUpO1xuICAgICAgICB0aGlzLm1lYXN1cmVFbGVtZW50Q2FjaGUuc2V0KGl0ZW0ua2V5LCBub2RlKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1lYXN1cmVkSXRlbVNpemUgPSB0aGlzLm9wdGlvbnMubWVhc3VyZUVsZW1lbnQobm9kZSwgZW50cnksIHRoaXMpO1xuICAgICAgdGhpcy5yZXNpemVJdGVtKGl0ZW0sIG1lYXN1cmVkSXRlbVNpemUpO1xuICAgIH07XG4gICAgdGhpcy5yZXNpemVJdGVtID0gKGl0ZW0sIHNpemUpID0+IHtcbiAgICAgIGNvbnN0IGl0ZW1TaXplID0gdGhpcy5pdGVtU2l6ZUNhY2hlLmdldChpdGVtLmtleSkgPz8gaXRlbS5zaXplO1xuICAgICAgY29uc3QgZGVsdGEgPSBzaXplIC0gaXRlbVNpemU7XG4gICAgICBpZiAoZGVsdGEgIT09IDApIHtcbiAgICAgICAgaWYgKGl0ZW0uc3RhcnQgPCB0aGlzLnNjcm9sbE9mZnNldCArIHRoaXMuc2Nyb2xsQWRqdXN0bWVudHMpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiICYmIHRoaXMub3B0aW9ucy5kZWJ1Zykge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiY29ycmVjdGlvblwiLCBkZWx0YSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX3Njcm9sbFRvT2Zmc2V0KHRoaXMuc2Nyb2xsT2Zmc2V0LCB7XG4gICAgICAgICAgICBhZGp1c3RtZW50czogdGhpcy5zY3JvbGxBZGp1c3RtZW50cyArPSBkZWx0YSxcbiAgICAgICAgICAgIGJlaGF2aW9yOiB2b2lkIDBcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmdNZWFzdXJlZENhY2hlSW5kZXhlcy5wdXNoKGl0ZW0uaW5kZXgpO1xuICAgICAgICB0aGlzLml0ZW1TaXplQ2FjaGUgPSBuZXcgTWFwKHRoaXMuaXRlbVNpemVDYWNoZS5zZXQoaXRlbS5rZXksIHNpemUpKTtcbiAgICAgICAgdGhpcy5ub3RpZnkoZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5tZWFzdXJlRWxlbWVudCA9IChub2RlKSA9PiB7XG4gICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fbWVhc3VyZUVsZW1lbnQobm9kZSwgdm9pZCAwKTtcbiAgICB9O1xuICAgIHRoaXMuZ2V0VmlydHVhbEl0ZW1zID0gbWVtbyhcbiAgICAgICgpID0+IFt0aGlzLmdldEluZGV4ZXMoKSwgdGhpcy5nZXRNZWFzdXJlbWVudHMoKV0sXG4gICAgICAoaW5kZXhlcywgbWVhc3VyZW1lbnRzKSA9PiB7XG4gICAgICAgIGNvbnN0IHZpcnR1YWxJdGVtcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBrID0gMCwgbGVuID0gaW5kZXhlcy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgICAgICAgIGNvbnN0IGkgPSBpbmRleGVzW2tdO1xuICAgICAgICAgIGNvbnN0IG1lYXN1cmVtZW50ID0gbWVhc3VyZW1lbnRzW2ldO1xuICAgICAgICAgIHZpcnR1YWxJdGVtcy5wdXNoKG1lYXN1cmVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmlydHVhbEl0ZW1zO1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAga2V5OiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgXCJnZXRJbmRleGVzXCIsXG4gICAgICAgIGRlYnVnOiAoKSA9PiB0aGlzLm9wdGlvbnMuZGVidWdcbiAgICAgIH1cbiAgICApO1xuICAgIHRoaXMuZ2V0VmlydHVhbEl0ZW1Gb3JPZmZzZXQgPSAob2Zmc2V0KSA9PiB7XG4gICAgICBjb25zdCBtZWFzdXJlbWVudHMgPSB0aGlzLmdldE1lYXN1cmVtZW50cygpO1xuICAgICAgcmV0dXJuIG5vdFVuZGVmaW5lZChcbiAgICAgICAgbWVhc3VyZW1lbnRzW2ZpbmROZWFyZXN0QmluYXJ5U2VhcmNoKFxuICAgICAgICAgIDAsXG4gICAgICAgICAgbWVhc3VyZW1lbnRzLmxlbmd0aCAtIDEsXG4gICAgICAgICAgKGluZGV4KSA9PiBub3RVbmRlZmluZWQobWVhc3VyZW1lbnRzW2luZGV4XSkuc3RhcnQsXG4gICAgICAgICAgb2Zmc2V0XG4gICAgICAgICldXG4gICAgICApO1xuICAgIH07XG4gICAgdGhpcy5nZXRPZmZzZXRGb3JBbGlnbm1lbnQgPSAodG9PZmZzZXQsIGFsaWduKSA9PiB7XG4gICAgICBjb25zdCBzaXplID0gdGhpcy5nZXRTaXplKCk7XG4gICAgICBpZiAoYWxpZ24gPT09IFwiYXV0b1wiKSB7XG4gICAgICAgIGlmICh0b09mZnNldCA8PSB0aGlzLnNjcm9sbE9mZnNldCkge1xuICAgICAgICAgIGFsaWduID0gXCJzdGFydFwiO1xuICAgICAgICB9IGVsc2UgaWYgKHRvT2Zmc2V0ID49IHRoaXMuc2Nyb2xsT2Zmc2V0ICsgc2l6ZSkge1xuICAgICAgICAgIGFsaWduID0gXCJlbmRcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhbGlnbiA9IFwic3RhcnRcIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFsaWduID09PSBcInN0YXJ0XCIpIHtcbiAgICAgICAgdG9PZmZzZXQgPSB0b09mZnNldDtcbiAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09IFwiZW5kXCIpIHtcbiAgICAgICAgdG9PZmZzZXQgPSB0b09mZnNldCAtIHNpemU7XG4gICAgICB9IGVsc2UgaWYgKGFsaWduID09PSBcImNlbnRlclwiKSB7XG4gICAgICAgIHRvT2Zmc2V0ID0gdG9PZmZzZXQgLSBzaXplIC8gMjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNjcm9sbFNpemVQcm9wID0gdGhpcy5vcHRpb25zLmhvcml6b250YWwgPyBcInNjcm9sbFdpZHRoXCIgOiBcInNjcm9sbEhlaWdodFwiO1xuICAgICAgY29uc3Qgc2Nyb2xsU2l6ZSA9IHRoaXMuc2Nyb2xsRWxlbWVudCA/IFwiZG9jdW1lbnRcIiBpbiB0aGlzLnNjcm9sbEVsZW1lbnQgPyB0aGlzLnNjcm9sbEVsZW1lbnQuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50W3Njcm9sbFNpemVQcm9wXSA6IHRoaXMuc2Nyb2xsRWxlbWVudFtzY3JvbGxTaXplUHJvcF0gOiAwO1xuICAgICAgY29uc3QgbWF4T2Zmc2V0ID0gc2Nyb2xsU2l6ZSAtIHRoaXMuZ2V0U2l6ZSgpO1xuICAgICAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKG1heE9mZnNldCwgdG9PZmZzZXQpLCAwKTtcbiAgICB9O1xuICAgIHRoaXMuZ2V0T2Zmc2V0Rm9ySW5kZXggPSAoaW5kZXgsIGFsaWduID0gXCJhdXRvXCIpID0+IHtcbiAgICAgIGluZGV4ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oaW5kZXgsIHRoaXMub3B0aW9ucy5jb3VudCAtIDEpKTtcbiAgICAgIGNvbnN0IG1lYXN1cmVtZW50ID0gbm90VW5kZWZpbmVkKHRoaXMuZ2V0TWVhc3VyZW1lbnRzKClbaW5kZXhdKTtcbiAgICAgIGlmIChhbGlnbiA9PT0gXCJhdXRvXCIpIHtcbiAgICAgICAgaWYgKG1lYXN1cmVtZW50LmVuZCA+PSB0aGlzLnNjcm9sbE9mZnNldCArIHRoaXMuZ2V0U2l6ZSgpIC0gdGhpcy5vcHRpb25zLnNjcm9sbFBhZGRpbmdFbmQpIHtcbiAgICAgICAgICBhbGlnbiA9IFwiZW5kXCI7XG4gICAgICAgIH0gZWxzZSBpZiAobWVhc3VyZW1lbnQuc3RhcnQgPD0gdGhpcy5zY3JvbGxPZmZzZXQgKyB0aGlzLm9wdGlvbnMuc2Nyb2xsUGFkZGluZ1N0YXJ0KSB7XG4gICAgICAgICAgYWxpZ24gPSBcInN0YXJ0XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFt0aGlzLnNjcm9sbE9mZnNldCwgYWxpZ25dO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCB0b09mZnNldCA9IGFsaWduID09PSBcImVuZFwiID8gbWVhc3VyZW1lbnQuZW5kICsgdGhpcy5vcHRpb25zLnNjcm9sbFBhZGRpbmdFbmQgOiBtZWFzdXJlbWVudC5zdGFydCAtIHRoaXMub3B0aW9ucy5zY3JvbGxQYWRkaW5nU3RhcnQ7XG4gICAgICByZXR1cm4gW3RoaXMuZ2V0T2Zmc2V0Rm9yQWxpZ25tZW50KHRvT2Zmc2V0LCBhbGlnbiksIGFsaWduXTtcbiAgICB9O1xuICAgIHRoaXMuaXNEeW5hbWljTW9kZSA9ICgpID0+IHRoaXMubWVhc3VyZUVsZW1lbnRDYWNoZS5zaXplID4gMDtcbiAgICB0aGlzLmNhbmNlbFNjcm9sbFRvSW5kZXggPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5zY3JvbGxUb0luZGV4VGltZW91dElkICE9PSBudWxsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNjcm9sbFRvSW5kZXhUaW1lb3V0SWQpO1xuICAgICAgICB0aGlzLnNjcm9sbFRvSW5kZXhUaW1lb3V0SWQgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5zY3JvbGxUb09mZnNldCA9ICh0b09mZnNldCwgeyBhbGlnbiA9IFwic3RhcnRcIiwgYmVoYXZpb3IgfSA9IHt9KSA9PiB7XG4gICAgICB0aGlzLmNhbmNlbFNjcm9sbFRvSW5kZXgoKTtcbiAgICAgIGlmIChiZWhhdmlvciA9PT0gXCJzbW9vdGhcIiAmJiB0aGlzLmlzRHluYW1pY01vZGUoKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgXCJUaGUgYHNtb290aGAgc2Nyb2xsIGJlaGF2aW9yIGlzIG5vdCBmdWxseSBzdXBwb3J0ZWQgd2l0aCBkeW5hbWljIHNpemUuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3Njcm9sbFRvT2Zmc2V0KHRoaXMuZ2V0T2Zmc2V0Rm9yQWxpZ25tZW50KHRvT2Zmc2V0LCBhbGlnbiksIHtcbiAgICAgICAgYWRqdXN0bWVudHM6IHZvaWQgMCxcbiAgICAgICAgYmVoYXZpb3JcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdGhpcy5zY3JvbGxUb0luZGV4ID0gKGluZGV4LCB7IGFsaWduOiBpbml0aWFsQWxpZ24gPSBcImF1dG9cIiwgYmVoYXZpb3IgfSA9IHt9KSA9PiB7XG4gICAgICBpbmRleCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGluZGV4LCB0aGlzLm9wdGlvbnMuY291bnQgLSAxKSk7XG4gICAgICB0aGlzLmNhbmNlbFNjcm9sbFRvSW5kZXgoKTtcbiAgICAgIGlmIChiZWhhdmlvciA9PT0gXCJzbW9vdGhcIiAmJiB0aGlzLmlzRHluYW1pY01vZGUoKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgXCJUaGUgYHNtb290aGAgc2Nyb2xsIGJlaGF2aW9yIGlzIG5vdCBmdWxseSBzdXBwb3J0ZWQgd2l0aCBkeW5hbWljIHNpemUuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IFt0b09mZnNldCwgYWxpZ25dID0gdGhpcy5nZXRPZmZzZXRGb3JJbmRleChpbmRleCwgaW5pdGlhbEFsaWduKTtcbiAgICAgIHRoaXMuX3Njcm9sbFRvT2Zmc2V0KHRvT2Zmc2V0LCB7IGFkanVzdG1lbnRzOiB2b2lkIDAsIGJlaGF2aW9yIH0pO1xuICAgICAgaWYgKGJlaGF2aW9yICE9PSBcInNtb290aFwiICYmIHRoaXMuaXNEeW5hbWljTW9kZSgpKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsVG9JbmRleFRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2Nyb2xsVG9JbmRleFRpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgICAgY29uc3QgZWxlbWVudEluRE9NID0gdGhpcy5tZWFzdXJlRWxlbWVudENhY2hlLmhhcyhcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5nZXRJdGVtS2V5KGluZGV4KVxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKGVsZW1lbnRJbkRPTSkge1xuICAgICAgICAgICAgY29uc3QgW3RvT2Zmc2V0Ml0gPSB0aGlzLmdldE9mZnNldEZvckluZGV4KGluZGV4LCBhbGlnbik7XG4gICAgICAgICAgICBpZiAoIWFwcHJveEVxdWFsKHRvT2Zmc2V0MiwgdGhpcy5zY3JvbGxPZmZzZXQpKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9JbmRleChpbmRleCwgeyBhbGlnbiwgYmVoYXZpb3IgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9JbmRleChpbmRleCwgeyBhbGlnbiwgYmVoYXZpb3IgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuc2Nyb2xsQnkgPSAoZGVsdGEsIHsgYmVoYXZpb3IgfSA9IHt9KSA9PiB7XG4gICAgICB0aGlzLmNhbmNlbFNjcm9sbFRvSW5kZXgoKTtcbiAgICAgIGlmIChiZWhhdmlvciA9PT0gXCJzbW9vdGhcIiAmJiB0aGlzLmlzRHluYW1pY01vZGUoKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgXCJUaGUgYHNtb290aGAgc2Nyb2xsIGJlaGF2aW9yIGlzIG5vdCBmdWxseSBzdXBwb3J0ZWQgd2l0aCBkeW5hbWljIHNpemUuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3Njcm9sbFRvT2Zmc2V0KHRoaXMuc2Nyb2xsT2Zmc2V0ICsgZGVsdGEsIHtcbiAgICAgICAgYWRqdXN0bWVudHM6IHZvaWQgMCxcbiAgICAgICAgYmVoYXZpb3JcbiAgICAgIH0pO1xuICAgIH07XG4gICAgdGhpcy5nZXRUb3RhbFNpemUgPSAoKSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBjb25zdCBtZWFzdXJlbWVudHMgPSB0aGlzLmdldE1lYXN1cmVtZW50cygpO1xuICAgICAgbGV0IGVuZDtcbiAgICAgIGlmIChtZWFzdXJlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGVuZCA9IHRoaXMub3B0aW9ucy5wYWRkaW5nU3RhcnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSB0aGlzLm9wdGlvbnMubGFuZXMgPT09IDEgPyAoKF9hID0gbWVhc3VyZW1lbnRzW21lYXN1cmVtZW50cy5sZW5ndGggLSAxXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmVuZCkgPz8gMCA6IE1hdGgubWF4KFxuICAgICAgICAgIC4uLm1lYXN1cmVtZW50cy5zbGljZSgtdGhpcy5vcHRpb25zLmxhbmVzKS5tYXAoKG0pID0+IG0uZW5kKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVuZCAtIHRoaXMub3B0aW9ucy5zY3JvbGxNYXJnaW4gKyB0aGlzLm9wdGlvbnMucGFkZGluZ0VuZDtcbiAgICB9O1xuICAgIHRoaXMuX3Njcm9sbFRvT2Zmc2V0ID0gKG9mZnNldCwge1xuICAgICAgYWRqdXN0bWVudHMsXG4gICAgICBiZWhhdmlvclxuICAgIH0pID0+IHtcbiAgICAgIHRoaXMub3B0aW9ucy5zY3JvbGxUb0ZuKG9mZnNldCwgeyBiZWhhdmlvciwgYWRqdXN0bWVudHMgfSwgdGhpcyk7XG4gICAgfTtcbiAgICB0aGlzLm1lYXN1cmUgPSAoKSA9PiB7XG4gICAgICB0aGlzLml0ZW1TaXplQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgdGhpcy5ub3RpZnkoZmFsc2UpO1xuICAgIH07XG4gICAgdGhpcy5zZXRPcHRpb25zKG9wdHMpO1xuICAgIHRoaXMuc2Nyb2xsUmVjdCA9IHRoaXMub3B0aW9ucy5pbml0aWFsUmVjdDtcbiAgICB0aGlzLnNjcm9sbE9mZnNldCA9IHRoaXMub3B0aW9ucy5pbml0aWFsT2Zmc2V0O1xuICAgIHRoaXMubWVhc3VyZW1lbnRzQ2FjaGUgPSB0aGlzLm9wdGlvbnMuaW5pdGlhbE1lYXN1cmVtZW50c0NhY2hlO1xuICAgIHRoaXMubWVhc3VyZW1lbnRzQ2FjaGUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgdGhpcy5pdGVtU2l6ZUNhY2hlLnNldChpdGVtLmtleSwgaXRlbS5zaXplKTtcbiAgICB9KTtcbiAgICB0aGlzLm1heWJlTm90aWZ5KCk7XG4gIH1cbn1cbmNvbnN0IGZpbmROZWFyZXN0QmluYXJ5U2VhcmNoID0gKGxvdywgaGlnaCwgZ2V0Q3VycmVudFZhbHVlLCB2YWx1ZSkgPT4ge1xuICB3aGlsZSAobG93IDw9IGhpZ2gpIHtcbiAgICBjb25zdCBtaWRkbGUgPSAobG93ICsgaGlnaCkgLyAyIHwgMDtcbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBnZXRDdXJyZW50VmFsdWUobWlkZGxlKTtcbiAgICBpZiAoY3VycmVudFZhbHVlIDwgdmFsdWUpIHtcbiAgICAgIGxvdyA9IG1pZGRsZSArIDE7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50VmFsdWUgPiB2YWx1ZSkge1xuICAgICAgaGlnaCA9IG1pZGRsZSAtIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtaWRkbGU7XG4gICAgfVxuICB9XG4gIGlmIChsb3cgPiAwKSB7XG4gICAgcmV0dXJuIGxvdyAtIDE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn07XG5mdW5jdGlvbiBjYWxjdWxhdGVSYW5nZSh7XG4gIG1lYXN1cmVtZW50cyxcbiAgb3V0ZXJTaXplLFxuICBzY3JvbGxPZmZzZXRcbn0pIHtcbiAgY29uc3QgY291bnQgPSBtZWFzdXJlbWVudHMubGVuZ3RoIC0gMTtcbiAgY29uc3QgZ2V0T2Zmc2V0ID0gKGluZGV4KSA9PiBtZWFzdXJlbWVudHNbaW5kZXhdLnN0YXJ0O1xuICBjb25zdCBzdGFydEluZGV4ID0gZmluZE5lYXJlc3RCaW5hcnlTZWFyY2goMCwgY291bnQsIGdldE9mZnNldCwgc2Nyb2xsT2Zmc2V0KTtcbiAgbGV0IGVuZEluZGV4ID0gc3RhcnRJbmRleDtcbiAgd2hpbGUgKGVuZEluZGV4IDwgY291bnQgJiYgbWVhc3VyZW1lbnRzW2VuZEluZGV4XS5lbmQgPCBzY3JvbGxPZmZzZXQgKyBvdXRlclNpemUpIHtcbiAgICBlbmRJbmRleCsrO1xuICB9XG4gIHJldHVybiB7IHN0YXJ0SW5kZXgsIGVuZEluZGV4IH07XG59XG5leHBvcnQge1xuICBWaXJ0dWFsaXplcixcbiAgYXBwcm94RXF1YWwsXG4gIGRlZmF1bHRLZXlFeHRyYWN0b3IsXG4gIGRlZmF1bHRSYW5nZUV4dHJhY3RvcixcbiAgZWxlbWVudFNjcm9sbCxcbiAgbWVhc3VyZUVsZW1lbnQsXG4gIG1lbW8sXG4gIG5vdFVuZGVmaW5lZCxcbiAgb2JzZXJ2ZUVsZW1lbnRPZmZzZXQsXG4gIG9ic2VydmVFbGVtZW50UmVjdCxcbiAgb2JzZXJ2ZVdpbmRvd09mZnNldCxcbiAgb2JzZXJ2ZVdpbmRvd1JlY3QsXG4gIHdpbmRvd1Njcm9sbFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIm1lbW8iLCJub3RVbmRlZmluZWQiLCJhcHByb3hFcXVhbCIsImRlZmF1bHRLZXlFeHRyYWN0b3IiLCJpbmRleCIsImRlZmF1bHRSYW5nZUV4dHJhY3RvciIsInJhbmdlIiwic3RhcnQiLCJNYXRoIiwibWF4Iiwic3RhcnRJbmRleCIsIm92ZXJzY2FuIiwiZW5kIiwibWluIiwiZW5kSW5kZXgiLCJjb3VudCIsImFyciIsImkiLCJwdXNoIiwib2JzZXJ2ZUVsZW1lbnRSZWN0IiwiaW5zdGFuY2UiLCJjYiIsImVsZW1lbnQiLCJzY3JvbGxFbGVtZW50IiwiaGFuZGxlciIsInJlY3QiLCJ3aWR0aCIsImhlaWdodCIsInJvdW5kIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiUmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlciIsImVudHJpZXMiLCJlbnRyeSIsImJvcmRlckJveFNpemUiLCJib3giLCJpbmxpbmVTaXplIiwiYmxvY2tTaXplIiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsIm9ic2VydmVXaW5kb3dSZWN0IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhc3NpdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib2JzZXJ2ZUVsZW1lbnRPZmZzZXQiLCJvcHRpb25zIiwiaG9yaXpvbnRhbCIsIm9ic2VydmVXaW5kb3dPZmZzZXQiLCJtZWFzdXJlRWxlbWVudCIsInNpemUiLCJ3aW5kb3dTY3JvbGwiLCJvZmZzZXQiLCJhZGp1c3RtZW50cyIsImJlaGF2aW9yIiwiX2EiLCJfYiIsInRvT2Zmc2V0Iiwic2Nyb2xsVG8iLCJjYWxsIiwiZWxlbWVudFNjcm9sbCIsIlZpcnR1YWxpemVyIiwiY29uc3RydWN0b3IiLCJvcHRzIiwidW5zdWJzIiwiaXNTY3JvbGxpbmciLCJpc1Njcm9sbGluZ1RpbWVvdXRJZCIsInNjcm9sbFRvSW5kZXhUaW1lb3V0SWQiLCJtZWFzdXJlbWVudHNDYWNoZSIsIml0ZW1TaXplQ2FjaGUiLCJNYXAiLCJwZW5kaW5nTWVhc3VyZWRDYWNoZUluZGV4ZXMiLCJzY3JvbGxEaXJlY3Rpb24iLCJzY3JvbGxBZGp1c3RtZW50cyIsIm1lYXN1cmVFbGVtZW50Q2FjaGUiLCJfcm8iLCJnZXQiLCJmb3JFYWNoIiwiX21lYXN1cmVFbGVtZW50IiwidGFyZ2V0IiwiZGlzY29ubmVjdCIsInNldE9wdGlvbnMiLCJvcHRzMiIsIk9iamVjdCIsImtleSIsInZhbHVlIiwiZGVidWciLCJpbml0aWFsT2Zmc2V0IiwicGFkZGluZ1N0YXJ0IiwicGFkZGluZ0VuZCIsInNjcm9sbFBhZGRpbmdTdGFydCIsInNjcm9sbFBhZGRpbmdFbmQiLCJnZXRJdGVtS2V5IiwicmFuZ2VFeHRyYWN0b3IiLCJvbkNoYW5nZSIsImluaXRpYWxSZWN0Iiwic2Nyb2xsTWFyZ2luIiwic2Nyb2xsaW5nRGVsYXkiLCJpbmRleEF0dHJpYnV0ZSIsImluaXRpYWxNZWFzdXJlbWVudHNDYWNoZSIsImxhbmVzIiwibm90aWZ5Iiwic3luYyIsIm1heWJlTm90aWZ5IiwiY2FsY3VsYXRlUmFuZ2UiLCJwcm9jZXNzIiwiaW5pdGlhbERlcHMiLCJjbGVhbnVwIiwiZmlsdGVyIiwiQm9vbGVhbiIsImQiLCJfZGlkTW91bnQiLCJfd2lsbFVwZGF0ZSIsImdldFNjcm9sbEVsZW1lbnQiLCJfc2Nyb2xsVG9PZmZzZXQiLCJzY3JvbGxPZmZzZXQiLCJzY3JvbGxSZWN0IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImdldFNpemUiLCJtZW1vT3B0aW9ucyIsImdldEZ1cnRoZXN0TWVhc3VyZW1lbnQiLCJtZWFzdXJlbWVudHMiLCJmdXJ0aGVzdE1lYXN1cmVtZW50c0ZvdW5kIiwiZnVydGhlc3RNZWFzdXJlbWVudHMiLCJtIiwibWVhc3VyZW1lbnQiLCJoYXMiLCJsYW5lIiwicHJldmlvdXNGdXJ0aGVzdE1lYXN1cmVtZW50Iiwic2V0IiwiQXJyYXkiLCJmcm9tIiwidmFsdWVzIiwic29ydCIsImEiLCJiIiwiZ2V0TWVhc3VyZW1lbnRzIiwibGVuZ3RoIiwic2xpY2UiLCJmdXJ0aGVzdE1lYXN1cmVtZW50IiwibWVhc3VyZWRTaXplIiwiZXN0aW1hdGVTaXplIiwib3V0ZXJTaXplIiwiZ2V0SW5kZXhlcyIsImluZGV4RnJvbUVsZW1lbnQiLCJub2RlIiwiYXR0cmlidXRlTmFtZSIsImluZGV4U3RyIiwiZ2V0QXR0cmlidXRlIiwiY29uc29sZSIsIndhcm4iLCJwYXJzZUludCIsIml0ZW0iLCJpc0Nvbm5lY3RlZCIsImNhY2hlZCIsImRlbGV0ZSIsInByZXZOb2RlIiwibWVhc3VyZWRJdGVtU2l6ZSIsInJlc2l6ZUl0ZW0iLCJpdGVtU2l6ZSIsImRlbHRhIiwiaW5mbyIsImdldFZpcnR1YWxJdGVtcyIsImluZGV4ZXMiLCJ2aXJ0dWFsSXRlbXMiLCJrIiwibGVuIiwiZ2V0VmlydHVhbEl0ZW1Gb3JPZmZzZXQiLCJmaW5kTmVhcmVzdEJpbmFyeVNlYXJjaCIsImdldE9mZnNldEZvckFsaWdubWVudCIsImFsaWduIiwic2Nyb2xsU2l6ZVByb3AiLCJzY3JvbGxTaXplIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJtYXhPZmZzZXQiLCJnZXRPZmZzZXRGb3JJbmRleCIsImlzRHluYW1pY01vZGUiLCJjYW5jZWxTY3JvbGxUb0luZGV4Iiwic2Nyb2xsVG9PZmZzZXQiLCJzY3JvbGxUb0luZGV4IiwiaW5pdGlhbEFsaWduIiwiZWxlbWVudEluRE9NIiwidG9PZmZzZXQyIiwic2Nyb2xsQnkiLCJnZXRUb3RhbFNpemUiLCJtYXAiLCJzY3JvbGxUb0ZuIiwibWVhc3VyZSIsImxvdyIsImhpZ2giLCJnZXRDdXJyZW50VmFsdWUiLCJtaWRkbGUiLCJjdXJyZW50VmFsdWUiLCJnZXRPZmZzZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/utils.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tanstack/virtual-core/dist/esm/utils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   approxEqual: () => (/* binding */ approxEqual),\n/* harmony export */   memo: () => (/* binding */ memo),\n/* harmony export */   notUndefined: () => (/* binding */ notUndefined)\n/* harmony export */ });\nfunction memo(getDeps, fn, opts) {\n    let deps = opts.initialDeps ?? [];\n    let result;\n    return ()=>{\n        var _a, _b, _c, _d;\n        let depTime;\n        if (opts.key && ((_a = opts.debug) == null ? void 0 : _a.call(opts))) depTime = Date.now();\n        const newDeps = getDeps();\n        const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index)=>deps[index] !== dep);\n        if (!depsChanged) {\n            return result;\n        }\n        deps = newDeps;\n        let resultTime;\n        if (opts.key && ((_b = opts.debug) == null ? void 0 : _b.call(opts))) resultTime = Date.now();\n        result = fn(...newDeps);\n        if (opts.key && ((_c = opts.debug) == null ? void 0 : _c.call(opts))) {\n            const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n            const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n            const resultFpsPercentage = resultEndTime / 16;\n            const pad = (str, num)=>{\n                str = String(str);\n                while(str.length < num){\n                    str = \" \" + str;\n                }\n                return str;\n            };\n            console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n        }\n        (_d = opts == null ? void 0 : opts.onChange) == null ? void 0 : _d.call(opts, result);\n        return result;\n    };\n}\nfunction notUndefined(value, msg) {\n    if (value === void 0) {\n        throw new Error(`Unexpected undefined${msg ? `: ${msg}` : \"\"}`);\n    } else {\n        return value;\n    }\n}\nconst approxEqual = (a, b)=>Math.abs(a - b) < 1;\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3ZpcnR1YWwtY29yZS9kaXN0L2VzbS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxTQUFTQSxLQUFLQyxPQUFPLEVBQUVDLEVBQUUsRUFBRUMsSUFBSTtJQUM3QixJQUFJQyxPQUFPRCxLQUFLRSxXQUFXLElBQUksRUFBRTtJQUNqQyxJQUFJQztJQUNKLE9BQU87UUFDTCxJQUFJQyxJQUFJQyxJQUFJQyxJQUFJQztRQUNoQixJQUFJQztRQUNKLElBQUlSLEtBQUtTLEdBQUcsSUFBSyxFQUFDTCxLQUFLSixLQUFLVSxLQUFLLEtBQUssT0FBTyxLQUFLLElBQUlOLEdBQUdPLElBQUksQ0FBQ1gsS0FBSSxHQUNoRVEsVUFBVUksS0FBS0MsR0FBRztRQUNwQixNQUFNQyxVQUFVaEI7UUFDaEIsTUFBTWlCLGNBQWNELFFBQVFFLE1BQU0sS0FBS2YsS0FBS2UsTUFBTSxJQUFJRixRQUFRRyxJQUFJLENBQUMsQ0FBQ0MsS0FBS0MsUUFBVWxCLElBQUksQ0FBQ2tCLE1BQU0sS0FBS0Q7UUFDbkcsSUFBSSxDQUFDSCxhQUFhO1lBQ2hCLE9BQU9aO1FBQ1Q7UUFDQUYsT0FBT2E7UUFDUCxJQUFJTTtRQUNKLElBQUlwQixLQUFLUyxHQUFHLElBQUssRUFBQ0osS0FBS0wsS0FBS1UsS0FBSyxLQUFLLE9BQU8sS0FBSyxJQUFJTCxHQUFHTSxJQUFJLENBQUNYLEtBQUksR0FDaEVvQixhQUFhUixLQUFLQyxHQUFHO1FBQ3ZCVixTQUFTSixNQUFNZTtRQUNmLElBQUlkLEtBQUtTLEdBQUcsSUFBSyxFQUFDSCxLQUFLTixLQUFLVSxLQUFLLEtBQUssT0FBTyxLQUFLLElBQUlKLEdBQUdLLElBQUksQ0FBQ1gsS0FBSSxHQUFJO1lBQ3BFLE1BQU1xQixhQUFhQyxLQUFLQyxLQUFLLENBQUMsQ0FBQ1gsS0FBS0MsR0FBRyxLQUFLTCxPQUFNLElBQUssT0FBTztZQUM5RCxNQUFNZ0IsZ0JBQWdCRixLQUFLQyxLQUFLLENBQUMsQ0FBQ1gsS0FBS0MsR0FBRyxLQUFLTyxVQUFTLElBQUssT0FBTztZQUNwRSxNQUFNSyxzQkFBc0JELGdCQUFnQjtZQUM1QyxNQUFNRSxNQUFNLENBQUNDLEtBQUtDO2dCQUNoQkQsTUFBTUUsT0FBT0Y7Z0JBQ2IsTUFBT0EsSUFBSVgsTUFBTSxHQUFHWSxJQUFLO29CQUN2QkQsTUFBTSxNQUFNQTtnQkFDZDtnQkFDQSxPQUFPQTtZQUNUO1lBQ0FHLFFBQVFDLElBQUksQ0FDVixDQUFDLElBQUksRUFBRUwsSUFBSUYsZUFBZSxHQUFHLEVBQUUsRUFBRUUsSUFBSUwsWUFBWSxHQUFHLEdBQUcsQ0FBQyxFQUN4RCxDQUFDOzs7dUJBR2MsRUFBRUMsS0FBS1UsR0FBRyxDQUN2QixHQUNBVixLQUFLVyxHQUFHLENBQUMsTUFBTSxNQUFNUixxQkFBcUIsTUFDMUMsY0FBYyxDQUFDLEVBQ2pCekIsUUFBUSxPQUFPLEtBQUssSUFBSUEsS0FBS1MsR0FBRztRQUVwQztRQUNDRixDQUFBQSxLQUFLUCxRQUFRLE9BQU8sS0FBSyxJQUFJQSxLQUFLa0MsUUFBUSxLQUFLLE9BQU8sS0FBSyxJQUFJM0IsR0FBR0ksSUFBSSxDQUFDWCxNQUFNRztRQUM5RSxPQUFPQTtJQUNUO0FBQ0Y7QUFDQSxTQUFTZ0MsYUFBYUMsS0FBSyxFQUFFQyxHQUFHO0lBQzlCLElBQUlELFVBQVUsS0FBSyxHQUFHO1FBQ3BCLE1BQU0sSUFBSUUsTUFBTSxDQUFDLG9CQUFvQixFQUFFRCxNQUFNLENBQUMsRUFBRSxFQUFFQSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDaEUsT0FBTztRQUNMLE9BQU9EO0lBQ1Q7QUFDRjtBQUNBLE1BQU1HLGNBQWMsQ0FBQ0MsR0FBR0MsSUFBTW5CLEtBQUtvQixHQUFHLENBQUNGLElBQUlDLEtBQUs7QUFLOUMsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJfc2hvd2Nhc2UvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3ZpcnR1YWwtY29yZS9kaXN0L2VzbS91dGlscy5qcz80OTcyIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG1lbW8oZ2V0RGVwcywgZm4sIG9wdHMpIHtcbiAgbGV0IGRlcHMgPSBvcHRzLmluaXRpYWxEZXBzID8/IFtdO1xuICBsZXQgcmVzdWx0O1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICBsZXQgZGVwVGltZTtcbiAgICBpZiAob3B0cy5rZXkgJiYgKChfYSA9IG9wdHMuZGVidWcpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKG9wdHMpKSlcbiAgICAgIGRlcFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IG5ld0RlcHMgPSBnZXREZXBzKCk7XG4gICAgY29uc3QgZGVwc0NoYW5nZWQgPSBuZXdEZXBzLmxlbmd0aCAhPT0gZGVwcy5sZW5ndGggfHwgbmV3RGVwcy5zb21lKChkZXAsIGluZGV4KSA9PiBkZXBzW2luZGV4XSAhPT0gZGVwKTtcbiAgICBpZiAoIWRlcHNDaGFuZ2VkKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBkZXBzID0gbmV3RGVwcztcbiAgICBsZXQgcmVzdWx0VGltZTtcbiAgICBpZiAob3B0cy5rZXkgJiYgKChfYiA9IG9wdHMuZGVidWcpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKG9wdHMpKSlcbiAgICAgIHJlc3VsdFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHJlc3VsdCA9IGZuKC4uLm5ld0RlcHMpO1xuICAgIGlmIChvcHRzLmtleSAmJiAoKF9jID0gb3B0cy5kZWJ1ZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmNhbGwob3B0cykpKSB7XG4gICAgICBjb25zdCBkZXBFbmRUaW1lID0gTWF0aC5yb3VuZCgoRGF0ZS5ub3coKSAtIGRlcFRpbWUpICogMTAwKSAvIDEwMDtcbiAgICAgIGNvbnN0IHJlc3VsdEVuZFRpbWUgPSBNYXRoLnJvdW5kKChEYXRlLm5vdygpIC0gcmVzdWx0VGltZSkgKiAxMDApIC8gMTAwO1xuICAgICAgY29uc3QgcmVzdWx0RnBzUGVyY2VudGFnZSA9IHJlc3VsdEVuZFRpbWUgLyAxNjtcbiAgICAgIGNvbnN0IHBhZCA9IChzdHIsIG51bSkgPT4ge1xuICAgICAgICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgICAgICAgd2hpbGUgKHN0ci5sZW5ndGggPCBudW0pIHtcbiAgICAgICAgICBzdHIgPSBcIiBcIiArIHN0cjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfTtcbiAgICAgIGNvbnNvbGUuaW5mbyhcbiAgICAgICAgYCVj4o+xICR7cGFkKHJlc3VsdEVuZFRpbWUsIDUpfSAvJHtwYWQoZGVwRW5kVGltZSwgNSl9IG1zYCxcbiAgICAgICAgYFxuICAgICAgICAgICAgZm9udC1zaXplOiAuNnJlbTtcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgY29sb3I6IGhzbCgke01hdGgubWF4KFxuICAgICAgICAgIDAsXG4gICAgICAgICAgTWF0aC5taW4oMTIwIC0gMTIwICogcmVzdWx0RnBzUGVyY2VudGFnZSwgMTIwKVxuICAgICAgICApfWRlZyAxMDAlIDMxJSk7YCxcbiAgICAgICAgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5rZXlcbiAgICAgICk7XG4gICAgfVxuICAgIChfZCA9IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMub25DaGFuZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfZC5jYWxsKG9wdHMsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cbmZ1bmN0aW9uIG5vdFVuZGVmaW5lZCh2YWx1ZSwgbXNnKSB7XG4gIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIHVuZGVmaW5lZCR7bXNnID8gYDogJHttc2d9YCA6IFwiXCJ9YCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5jb25zdCBhcHByb3hFcXVhbCA9IChhLCBiKSA9PiBNYXRoLmFicyhhIC0gYikgPCAxO1xuZXhwb3J0IHtcbiAgYXBwcm94RXF1YWwsXG4gIG1lbW8sXG4gIG5vdFVuZGVmaW5lZFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIm1lbW8iLCJnZXREZXBzIiwiZm4iLCJvcHRzIiwiZGVwcyIsImluaXRpYWxEZXBzIiwicmVzdWx0IiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJkZXBUaW1lIiwia2V5IiwiZGVidWciLCJjYWxsIiwiRGF0ZSIsIm5vdyIsIm5ld0RlcHMiLCJkZXBzQ2hhbmdlZCIsImxlbmd0aCIsInNvbWUiLCJkZXAiLCJpbmRleCIsInJlc3VsdFRpbWUiLCJkZXBFbmRUaW1lIiwiTWF0aCIsInJvdW5kIiwicmVzdWx0RW5kVGltZSIsInJlc3VsdEZwc1BlcmNlbnRhZ2UiLCJwYWQiLCJzdHIiLCJudW0iLCJTdHJpbmciLCJjb25zb2xlIiwiaW5mbyIsIm1heCIsIm1pbiIsIm9uQ2hhbmdlIiwibm90VW5kZWZpbmVkIiwidmFsdWUiLCJtc2ciLCJFcnJvciIsImFwcHJveEVxdWFsIiwiYSIsImIiLCJhYnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/utils.js\n");

/***/ })

};
;